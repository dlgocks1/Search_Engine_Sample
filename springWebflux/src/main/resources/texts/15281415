As we’ve demonstrated over the past several weeks, there are no shortage of new file systems in the latest version of Linux. (See NILFS: A File System to Make SSDs Scream, Linux Don’t Need No Stinkin’ ZFS: BTRFS Intro & Benchmarks and ext4 File System: Introduction and Benchmarks) 
In keeping with the theme of new file systems, let’s take a look at SquashFS. SquashFS is a read-only compressed file system that has a variable block size. The primary intent of the file system is for constrained block device/memory systems. The classic example targets SquashFS for embedded systems but there are other uses for it that fall outside of the embedded world, and could surprise you.
Compressed File Systems
Data compression has been around for a very long time. As everyone knows, the concept behind data compress is to encode data using various techniques saving storage space. Compression also reduces the size of data that is to be transmitted. The most common example in Linux is gzip that is used to compress data files. Here’s a quick example illustrating the change in file size:
$ ls -lsah FS_scan.csv
3.2M -rw-r--r-- 1 laytonjb laytonjb 3.2M 2009-05-24 20:31 FS_scan.csv
$ gzip -9 FS_scan.csv
$ ls -lsah FS_scan.csv.gz
268K -rw-r--r-- 1 laytonjb laytonjb 261K 2009-05-24 20:31 FS_scan.csv.gz
The original file was 3.2MB and after using gzip, with the “-9″ option that provides maximum compression, the file is 268KB. Also notice the the extension “.gz” to indicate that the file has been compressed with gzip. The compression ratio, which is the ratio of the original size to the compressed size, is 11.9:1. The compression ratio is very dependent on the uncompressed data (how compressible is the data?) and the compression algorithm.
There are generally two types of algorithms - lossless and lossy. Since this article is about data it will focus on lossless algorithms that have an encoding that be reversed to recreate the data exactly. There are a huge number of compression algorithms that take data and find a new encoding of the data that is much smaller. The difference between algorithms focuses on the techniques that create the new encoding. From the user perspective two of the biggest concerns are how much compression can be obtained and how much time and/or CPU usage it takes to perform the compression (or uncompression). However, the goal of all of them remains the same, to reduce the size of data to save space. 
The primary trade-offs in compressed file systems is that it takes CPU cycles and time to compress and uncompress data in return for reduced storage space. If you have the cycles and don’t need a fast file system then you can save space. Alternatively, if you are severely memory or storage space constrained, then compressed file systems may be the only choice. This is most common in embedded systems that have severe storage restrictions. 
There is an older article that discussed the compressed file systems available for Linux at the time, how they could be employed, etc. To date it is one of the better articles around compressed file systems. Overall, there is a very large number of compressed file systems available for Linux. For example, there is, JFFS, JFFS2, LogFS, CramFS, compFUSEd, and SquashFS among others. The file system compFUSEd works in conjunction with existing file systems and FUSE to allow you to do compression with both read and write for your existing file system. 
Btrfs also has a compression option. Compression can be turned on as a mount option and provides compression via the zlib function that is in the kernel. While this is a great feature and works on read as well as write (not all compressed file systems do this), the focus of btrfs is not just as a compressed file system. This article will focus on file systems that are primarily compressed file systems. In particular, it will focus on SquashFS, which is the newest compressed file system for Linux, offering lots of new features that can be be exploited by non-embedded devices (even your every day desktop!). 
SquashFS
SquashFS has been under development outside the Linux kernel for a number of years. Phillip Lougher started SquashFS because the existing compressed file systems did not have the features that he wanted. He began development around the 2002 time frame and tried to get it merged into the kernel a couple of times. However, the Linux community wanted some changes and features which Phillip accomplished, while adding new features that put SquashFS above other compressed file systems in many respects. So version 4.0 of SquashFS went into the Linux kernel in version 2.6.29. 
SquashFS is a read-only compressed file system which means that once you mount a SquashFS file system you can only read from it. However, as will be discussed later, you can combine SquashFS with a union mount file system UnionFS or Aufs to allow you to read and write to the file system (at least from the user perspective). The version of SquashFS currently in the kernel uses gzip for it’s compression. 
SquashFS is arguably one of the most feature-rich compressed file systems. In the documentation for SquashFS that is included in the kernel is a quick comparison with CramFS. The author has not checked the accuracy or validity of the comparison but it is reproduced here since it at least provides a list of SquashFS features.
Feature
SquashFS
CramFS