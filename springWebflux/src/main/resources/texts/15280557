ハードウェアとアプリケーションのモニタ 
重要な日常業務の 1 つに、サイトのパフォーマンスと障害に関するモニタリングがあります。 モニタすることによって、パフォーマンスのボトルネックとなる要因を発見したり、パフォーマンスの基準値を把握することができます。
獲得した基準値を参考に、パフォーマンスのチューニングやハードウェア アップグレードの効果を検証できます。
また、信頼性をモニタすることによって、サービス中断が起きる前に問題個所を特定できます。 アプリケーションによっては、サービスがクラッシュした場合、IIS を自動的に再起動するように設定できます。IIS
の再起動をモニタして、早期にアプリケーションの問題を解決することができるのです。
トピック
サーバー パフォーマンスをモニタおよびテストするツール 
ハードウェアのモニタ 
Web
アプリケーションのモニタ 
信頼性のモニタ 
サーバー パフォーマンスをモニタおよびテストするツール
Microsoft では、各種パフォーマンス チューニングとテスト用のツールを用意しています。Windows 2000 および IIS 5.0 に含まれるもの以外に、『Windows
2000 リソース キット』CD-ROM および Microsoft Web サイトから入手できるものもあります。
システム モニタは Windows 2000 に組み込まれ、多くのサーバー パフォーマンス項目をモニタするのに使用します。
Process and Thread Status (pstat.exe) は、現在実行されているプロセスおよびスレッドの状態を表示します。
Process Tree (ptree.exe) は、プロセス継承ツリーをクエリして、ローカルまたはリモート コンピュータのプロセスを終了することができます。
HTTP Monitoring Tool は、サーバーへの HTTP アクセス量をモニタして、アクセス量に変化が生じると報告します。
ネットワーク モニタ ツールは Windows 2000 の管理ツールでネットワーク トラフィックをモニタすることができます。
”NetStat” はコマンド ライン ツールで、サーバーの現在のネットワーク接続に関する情報を表示します。
WMI (Windows Management Instrumentation) は統一された API でハードウェアおよびソフトウェアの診断を行います。
MMC (Microsoft 管理コンソール) は、ネットワーク全体を診断できるスナップインに対応しています。
これらのツールの要となるのは、IIS 5.0 および Windows 2000 OS に組み込まれているパフォーマンス カウンタです。開発者が独自に開発する ISAPI
DLL または COM コンポーネントにカスタム パフォーマンス カウンタを追加することもできます。このカウンタは、システム モニタなど上記のツールの一部および
Web Application Stress Tool、WCAT で直接読み込むことができます。
システム モニタ は、Web サーバーのパフォーマンス基準値を判断する重要なツールです。システム モニタを使用して、ソフトウェアやハードウェアに行った変更がどのようにパフォーマンスに影響するかモニタします。システム
モニタの UI はパフォーマンス カウンタ値を表示して、モニタおよびログの取得を行うことができます。また、カウンタ動作をグラフィカルにログしたり、イベント ビューアに警告が表示されるように設定したりできます。システム
モニタには、システムに登録されている各カウンタのドキュメントが用意されています。
上記のツールについての詳細は、『Windows 2000 リソース キット』の オンライン IIS 5.0 ドキュメントを参照してください。
ハードウェアのモニタ
メモリ
メモリ不足が原因となる問題では、多くの場合、システムのほかの個所の不具合として現れます。不具合が発生した場合にはまずはじめにメモリをモニタして、十分な量が搭載されていることを確認してからほかのコンポーネントを確認します。専用
Web サーバーで Windows 2000 および IIS 5.0 を動作するために必要な最低 RAM 容量は 128 MB ですが、256 MB ～ 1 GB
以上搭載することをお勧めします。メモリの増設は、E-Commerce サイト、コンテンツが多いサイト、およびトラフィック量が多いサイトに特に効果的です。既定では
IIS ファイル キャッシュが利用可能な合計メモリの半分を使用するように設定されていますので、メモリが多ければ IIS ファイル キャッシュも大きくなります。
メモ
Windows 2000 Advanced Server は最大 8 GB までの RAM に対応していますが、IIS ファイル キャッシュは 4 GB 以上利用することができません。
現在サーバーに搭載されているメモリがニーズに対して十分かどうか判断するには、Windows 2000 に組み込まれているパフォーマンス ツールを使用します。パフォーマンス
ツールの 1 つである システム モニタは、時間単位で推移するカウンタ値をグラフィカルに表示します。
また、キャッシュ設定にも注意してください。問題がキャッシュ設定にあれば、メモリを追加するだけではパフォーマンスの問題を解決できない場合があります。IIS キャッシュの設定とサーバー
パフォーマンスに対する影響を理解する必要があります。IIS キャッシュ設定がサーバー負荷に対して不適切な場合、メモリ不足ではなく、設定の問題によってパフォーマンスのボトルネックが発生することがあります。キャッシュ設定についての詳細は、IIS
設定の項および本ホワイト ペーパーの「付録 1 : パフォーマンス設定」を参照してください。ASP および IIS のキャッシュに関する詳細は、「付録 3 :
ASP キャッシュ」を参照してください。
メモ
パフォーマンス カウンタを使用してモニタを行う場合、[カウンタの追加] ダイアログ ボックスでカウンタを選択して [説明] をクリックすると説明が表示されます。
メモリに関係するパフォーマンス ボトルネックが発生しているかどうかを確認するには、次のカウンタをログします。
Memory: Available Bytes。ピーク時に備えて、利用可能なメモリのうち 10% を残すようにしてください。既定では、IIS 5.0
が利用可能なメモリの 50% をファイル キャッシュ用として使用することに注意してください。
Memory: Page Faults/sec、 Memory: Pages Input/sec、および Memory: Page Reads/sec。プロセスがメモリ内のページを要求して、システムが指定された場所からページを発見できないとページ
フォールトが発生します。メモリの別の場所にページがある場合は、ソフト ページ フォールトと呼びます。ページをディスクから取り出す必要がある場合は、ハード ページ
フォールトと呼びます。多くのプロセッサは、メインの処理にとくに問題を引き起こすことなく大量のソフト フォールトを処理できます。しかし、ハード フォールトでは、顕著な遅延を引き起こします。Page
Faults/sec はプロセッサがページ フォールトを処理する全体的なレートです。これにはハード ページ フォールトと、ソフト ページ フォールトが含まれます。Pages
Input/sec は、ハード ページ フォールトを解決するためにディスクから読み取られたページの数です。Page Reads/sec は、ハード ページ フォールトを解決するためにディスクが読み取られた回数です。Pages
Input/sec は、Page Reads/sec と同等またはそれ以上になり、ハード ページ フォールト率を判断するのに使用できます。これらの値が低いと、サーバーは要求に素早く反応します。値が高い場合、キャッシュにメモリを割り当てすぎて、システム全体の空きメモリ量が不足していることが考えられます。サーバーの
RAM を増設しなければならない場合がありますが、キャッシュ サイズを縮小するのも効果的です。
Memory: Cache Bytes、Internet Information Services Global: File Cache Hits
%、Internet Information Services Global: File Cache Flushes、およびInternet
Information Services Global: File Cache Hits。1 つ目のカウンタの Memory: Cache
Bytes は、ファイル システム キャッシュのサイズをモニタします。既定では、利用可能メモリの最大 50% まで使用します。IIS は、メモリが足りなくなるとキャッシュを自動的に縮小するので、このカウンタの傾向をモニタする必要があります。2
つ目のカウンタは、全体のキャッシュ要求に対するキャッシュのヒット率を示すもので、IIS ファイル キャッシュの設定が有効に働いているかどうかを示しています。静的ファイルを中心に構成されたサイトの場合、80%
以上のキャッシュ ヒット率が理想的な値となります。IIS Global: File Cache Flushes および IIS Global: File Cache
Hits のログを比較して、適切な間隔でキャッシュの内容が削除されているか確認します。頻繁に削除が行われている場合、オブジェクトが必要以上にキャッシュから削除されている可能性があります。また、削除の間隔が遅すぎると、メモリが無駄になっている可能性もあります。詳細については、「付録
1 : パフォーマンス設定」の ObjectCacheTTL、MemCacheSize、および MaxCachedFileSize オブジェクトの説明を参照してください。
Page File Bytes: Total。このカウンタは、システム上のページ ファイルのサイズを示します。ページ ファイルのサイズが大きいほど、システムがページ
ファイルに格納できるメモリ量が増加します。Windows 2000 はシステム ドライブにページ ファイルを作成します。また、各論理ディスクにページ ファイルを作成したり、ページ
ファイルのサイズを調整することもできます。複数の物理ドライブに渡ってページ ファイルを作成するとページ ファイルのパフォーマンスが向上します (ただし、サイト
コンテンツやログ ファイルが含まれるドライブは使用しないこと)。システム ドライブのページ ファイル サイズは物理メモリの倍以上に設定してください。これにより、クラッシュが発生した場合にシステムが
RAM 内容のすべてをディスクに書き込むことができます。
Memory: Pool Paged Bytes、Memory: Pool Nonpaged Bytes、Process: Pool
Paged Bytes: Inetinfo、Process: Pool Nonpaged Bytes: Inetinfo、Process:
Pool Paged Bytes: dllhost#n 、およびProcess: Pool Nonpaged Bytes: dllhost。
Memory: Pool Paged Bytes および Memory: Pool Nonpaged Bytes はサーバーの全プロセスのプール領域をモニタします。上記のその他のカウンタは
IIS 5.0 が直接利用するプール領域をモニタします。つまり、IIS が動作する Inetinfo プロセスまたは分離およびプールされたアプリケーションが動作する
Dllhost プロセスをモニタします。サーバーのすべての Dllhost プロセス インスタンスをモニタするようにしてください。すべてのインスタンスがモニタされていないと、IIS
が使用しているプール領域の正確な値を得ることができません。システムのメモリ プールは、アプリケーションおよび OS が作成して使用するオブジェクトを格納します。メモリ
プールの内容は、特権モードでのみアクセスできます。つまり、オペレーティング システムのカーネルのみがメモリ プールを直接操作できます。ユーザー プロセスは、これを操作できません。IIS
5.0 が動作しているサーバーでは、接続を処理するスレッド、およびファイル ハンドルやソケットなどサービスが使用するその他のオブジェクトは非ページ プールに格納されます。
RAM を追加する以外に、次の方法を使用してメモリ性能を向上できます。データ組織の改善、ディスクのミラー化またはストライプ化、CGI アプリケーションの ISAPI
または ASP アプリケーションへの置き換え、ページ ファイルの拡大、IIS ファイル キャッシュのタイミング調整、不要な機能の削除およびファイル システム キャッシュのバランスを
IIS 5.0 ワーキング セット優先に変更する方法、などです。IIS 5.0 ワーキング セット優先への変更は、本ホワイトペーパーの後半で説明します。
プロセッサ キャパシティ
ユーザーは Web サイトから軽快なレスポンスを期待し、一方でサイトには動的に生成されるコンテンツが増加しているという状況なので、高速で効率的なプロセッサ利用は重要な課題です。1
つ以上のプロセスがプロセッサ時間を独占してしまうとボトルネックが発生します。これにより、すぐにも実行に入りたいプロセス スレッドが、プロセッサ時間の待ち行列で順番を待つことになります。メモリ、ディスクまたはネットワーク接続などのハードウェアを増設してもプロセッサでのボトルネックは解決されず、逆効果となってしまう場合もあります。
Windows 2000 Server 上の IIS 5.0 は、2 ～ 4 プロセッサまで効果的に拡張できます。プロセッサの追加を検討する場合、Web サイトのビジネス要件を考慮してください。たとえば、サーバーで主に静的コンテンツをホストしている場合、2
プロセッサのコンピュータで十分な可能性があります。動的に生成されるコンテンツをホストしている場合、4 プロセッサ構成によって問題が解決される場合があります。しかし、1
台のコンピュータで対処するのが不可能なくらい、サイトの負荷が大きい場合もあります。このような状況では、サイトを複数のサーバーに分散することをお勧めします。すでに複数のサーバーにサイトを分散している場合、サーバーを追加することを検討してください。
ただし、Windows 2000 および IIS 5.0 ではメモリの問題を解決することによって最大のパフォーマンス効果を得ることができます。Web サーバーのプロセッサを増設するまえに、メモリ上の問題がないかどうか確認してから次のパフォーマンス
カウンタをモニタしてください。
System: Processor Queue Length。このカウンタは、システム上のプロセッサが共有する待ち行列に含まれているスレッド数を表示します。この値が継続的に
2 以上を示す場合、プロセッサ ボトルネックが発生しています。
Processor: %Processor Time。プロセッサ ボトルネックが発生すると、Processor: % Processor Time
の値が高いのに対して、ネットワーク アダプタ カードおよびディスク I/O が最大キャパシティを下回る状況になります。マルチプロセッサ コンピュータでは、Processor:
% Processor Time カウンタをモニタして CPU 間の負荷の均等性を確認することをお勧めします。
Thread: Context Switch/sec:Dllhost# N => Thread#
、Thread: Context Switches/sec:Inetinfo=>Thread# 、およびSystem:
Context Switches/sec。スレッド プールのサイズを増やす場合、上記 3 つのカウンタをモニタすることをお勧めします。スレッド数を増やすと、コンテキスト切り替えが増えすぎてパフォーマンスが減少してしまう場合があります。1
つの要求につき、10 以上のコンテキスト切り替えが発生しないようにします。もし 10 以上のコンテキスト切り替えが発生する場合、スレッド プール サイズを縮小することを検討してください。接続と要求の状況から見た全体的なパフォーマンスを、スレッド数の調整で改善するのは、簡単にはいかないことがあります。スレッドのチューニングを行う場合、必ずあとでパフォーマンスをモニタしてパフォーマンスの向上／低下を確認してください。スレッド数を調整する必要があるかどうか判断するには、スレッド数と各プロセスの中のスレッドのプロセッサ時間を合計プロセッサ時間と比較します。スレッドが常にビジーで、プロセッサ時間を完全に利用しきっていない場合は、スレッドを追加することによってパフォーマンスが改善する可能性があります。しかし、スレッドがビジーかつプロセッサが最大キャパシティに近い状態の場合、スレッド数を増やすよりも複数のサーバーに負荷を分散するほうが効果的です。詳細については、「付録
1 : パフォーマンス設定」の AspThreadGateEnabled および AspProcessorThreadMax メタベース プロパティの説明を参照してください。
Processor: Interrupts/sec および Processor: % DPC Time。このカウンタを使用して、プロセッサが割り込みおよび遅延プロシージャ呼び出し
(DPC) に費やす時間を判断します。この 2 つの項目は、主にクライアント要求によって発生し、プロセッサ負荷の要因にもなります。一部の NIC は、割り込み緩和機構が組み込まれています。この機構によって、割り込み数が高くなりすぎると割り込みがバッファに蓄積されます。
ネットワーク キャパシティ、レイテンシおよび帯域幅
ネットワークは、ユーザーがサーバーに対して要求を行うための回線です。ユーザーから見たサーバー パフォーマンスが悪いとすれば、その最大の要因は、要求と応答がサーバーとの間を行き来する時間です。この要求と応答のサイクル時間はレイテンシと呼ばれます。Web
サーバー管理者がレイテンシを軽減することは非常に困難です。たとえば、インターネット上の遅いルーターやクライアントとサーバーの物理的距離については、対策を立てることができません。
静的コンテンツ中心のサイトでは、ネットワーク帯域幅がパフォーマンス ボトルネックの原因としてまず考えられます。比較的小規模なサーバーでも T3 接続 (45Mbps)
や 100Mbps Fast Ethernet 接続が完全に飽和してしまうことがあります。これにはネットワークへの接続をチューニングして、有効帯域幅を効率的に使用することで、帯域幅のボトルネックを軽減することができます。
有効帯域幅を計測するには、サーバーがデータを送受信する速度を測定します。Web、FTP、SMTP サービス、TCP オブジェクト、IP オブジェクトおよびネットワーク
インターフェイス オブジェクトなど、サーバーの多くのコンポーネントでのデータ転送率を計測するパフォーマンス カウンタが用意されています。これらは、OSI (Open
System Interconnectivity) レイヤの各層に対応しています。これらのカウンタの詳細な一覧と説明については、『Windows 2000 Server
リソース キット』に同梱されている『インターネットインフォメーションサービス 5.0 リソースガイド』を参照してください。特に、「サーバーの監視とチューニング」の章の「ネットワーク
I/O」の項を参照してください。データ転送率をモニタするには、まず次のカウンタを使用します。
Network Interface: Bytes Total/sec。ネットワーク接続でボトルネックが発生しているかどうか判断するには、Network
Interface: Bytes Total/sec カウンタと NIC の合計帯域幅を比較します。トラフィックの急激な増加に備えて、通常の使用状況ではキャパシティの
50% を超えないようにします。この値が接続の最大キャパシティに近く、そしてプロセッサとメモリ使用率が中程度であれば、ネットワーク接続でボトルネックが発生している可能性があります。
Web Service: Maximum Connections および Web Service: Total Connection Attempts。Web
サーバーでネットワーク接続を使用するほかのサービスを実行している場合、Web Service: Maximum Connections および Web Service:
Total Connection Attempts カウンタをモニタして十分な接続数が確保されているか確認します。そしてこれらの値をメモリとプロセッサ使用率の値と比較し、ほかのコンポーネントではなく、接続で問題が発生していることを確認する必要があります。
ディスク最適化
IIS 5.0 は、ディスクにログを保存するため、クライアントのキャッシュヒットが 100% ヒットであっても、定期的なディスク動作が行われます。一般的に、ログ以外のディスク動作が頻繁に発生する場合、システムのほかの個所をチューニングする必要があります。たとえば、ハード
ページ フォールトで頻繁なディスク アクセスが発生している場合は、RAM 不足の可能性を考慮する必要があります。
メモリへのアクセスは、ディスク シークよりも約 1,000,000 倍高速です。したがって、リクエストを処理するためにハード ディスクを読みにいけば、パフォーマンスは当然、低下します。ホストしているサイトの種類によっては、ディスク
シークの頻度はかなり違ってきます。サイトにランダムにアクセスされる大きなファイル セットが存在する、サイト上のファイルが大きい、または RAM が少ない場合、IIS
は RAM にファイルをコピーしてアクセスを高速化することができません。
通常、Physical Disk カウンタは、サーバーがビジー状態のときにディスク読み込み数の急激な増加が発生していないかを監視するのに使用します。RAM が十分に搭載されている場合、多くの接続はキャッシュ
ヒットを起こしますが、同じサーバー上にデータベースが格納されていて、クライアントがそれぞれ異なるクエリを実行している場合は例外です。このような状況ではキャッシュを利用できません。また、ログによってディスク
ボトルネックが発生することにも注意してください。ディスク アクセスが大量に必要な要因がないにもかかわらず、ディスク アクセスが頻繁に行われている場合、メモリが不足していないかどうかサーバーの
RAM 容量を確認する必要があります。
ディスク アクセスの頻度を確認するには、次のカウンタを使用します。
Processor: % Processor Time、Network Interface Connection: Bytes Total/sec、およびPhysicalDisk:
% Disk Time。3 つのカウンタがすべて高い値を示している場合、ハードディスク以外の要因がサイトのボトルネックとなっています。しかし、%
Disk Time が高く、プロセッサとネットワーク接続に余裕のある状態の場合は、ハードディスクがボトルネックとなっている可能性があります。Physical Disk
カウンタが有効に設定されていない場合、コマンド ラインを開き、"diskperf -yd" コマンドを実行してください。
セキュリティ
特に E-Commerceの Web サイトを運営する場合、Web アプリケーション セキュリティに対するユーザーの懸念とパフォーマンスとの兼ね合いが重要な課題となります。セキュリティで保護された
Web 通信は保護されていない通信に比べて多くのリソースを必要とします。よって、SSL プロトコルや IP アドレス チェックなどのセキュリティ手法をどのような状況で利用すべきか理解する必要があります。たとえば、ホームページや検索結果のページでは、おそらく
SSL を使用する必要性はありません。しかし、ユーザーが支払いや購入のページに移動した場合は、それらのページがセキュリティで保護されていることを確実にしておく必要があります。
SSL を使用する場合、SSL セッション キャッシュに含まれているセキュリティ情報を使って再接続を行う場合に比べて初期接続を確立するコストは 5 倍も高価であることにご注意ください。SSL
セッション キャッシュの既定タイムアウトが Windows NT 4.0 の 2 分から Windows 2000 では 5 分に変更されました。このデータが削除されると、クライアントとサーバーは新しい接続を確立する必要があります。長時間の
SSL セッションが必要な場合、ServerCacheTime レジストリ設定項目を変更してタイムアウト時間を延長することを検討してください。SSL を使用したユーザーが数千人接続することが想定される場合は、SSL
セッションの接続時間を予測して、ServerCacheTime パラメータをその予測よりやや長い時間に設定します。タイムアウトを長く設定しすぎると、キャッシュの中に古いデータが残ってしまうことがあります。また、HTTP
キープアライブが有効に設定されていることを確認します。HTTP キープアライブを使用すると、ブラウザが接続を明示的に閉じない限り SSL セッションは無効になりません。
すべてのセキュリティ手法にはパフォーマンスコストが伴いますが、Windows 2000 および IIS 5.0 のセキュリティ サービスは複数の OS サービスに統合されています。つまり、それらのサービスから分離してセキュリティ機能のみをモニタすることができません。よって、セキュリティによるオーバーヘッドを検証するには、セキュリティ機能を使用した場合と使用していない場合でサーバー
パフォーマンスを比較することが一般的な方法です。テストは、固定された負荷と固定されたサーバー構成で行います。これにより、セキュリティ機能のみが変動する要因となります。テストでは、次の項目をモニタします。
Processor Activity および Processor Queue。認証、IP アドレス チェック、SSL
プロトコルおよび暗号化の手法は相当な処理を必要とするセキュリティ機能です。セキュリティ機能が有効に設定されている場合、特権およびユーザー モードのプロセッサ動作、およびコンテキスト切り替えと割り込みの頻度が増えます。サーバーに搭載されているプロセッサの能力が負荷に対して不十分な場合、待ち行列が発生する可能性があります。この場合、暗号化アクセラレータなどの特殊な装置が必要になる場合があります。
SSL プロトコルが使用されている場合、lsass.exe が想像以上に CPU 時間を消費している場合があります。SSL 処理は lsass.exe で行われるからです。よって、Windows
NT での CPU 使用率のモニタに慣れている管理者は、CPU時間の消費が、NTに比べてInetinfo.exe では少なく Isass.exe では多くなっていることに気づくでしょう。
Physical Memory Used: セキュリティを利用すると、システムが通常よりも多くのユーザー情報の格納と取得を行います。また、SSL
プロトコルは 40 ～ 1,024 ビット長の "ロング キー" を使用してメッセージの暗号化と復号化を行います。
Network Traffic: ログオン パスワード認証と、IP アドレスの確認のために使用されるドメイン コントローラと、IIS 5.0 サーバーの間で、トラフィックが増加する場合があります。
Latency and Delays: SSL などの高度なセキュリティ機能を使用した場合、暗号化と復号化の処理に大量のプロセッサ サイクルが消費されてしまい、パフォーマンス劣化の大きな原因となります。SSL
プロトコルを使用しているサーバーからファイルをダウンロードすると、SSL を使用していない場合に比べて 10 ～ 100 倍遅いことがあります。
1 台のサーバーが IIS 5.0 とドメイン コントローラとして動作している場合、ドメイン サービスで必要なプロセッサ 使用率、メモリ、ネットワークおよびディスク動作によって、これらのリソースへの負荷が非常に高くなることがあります。ドメイン
サービスを実行する負荷によっては、IIS 5.0 が効率的に動作しない場合があります。ドメイン コントローラで IIS 5.0 を実行することはお勧めしません。
Web アプリケーションのモニタ
設計が悪いアプリケーションを優れた設計で十分にテストされたアプリケーションに置き換えると、パフォーマンスが劇的に向上することがあります。場合によっては、パフォーマンスが
30 倍も向上することがあります。ただし、Web アプリケーションが AS/400 などの既存システムのバック エンド レイテンシに影響されることを意識する必要があります。遠隔地のデータ
ソースもあらゆる理由によって問題の原因となり得ます。開発者がほかの Web サイトからデータをアクセスするようにアプリケーションを設計した場合、その Web サイトがクラッシュすると、サーバーでボトルネックが発生します。アプリケーションがリモートの
SQL Server データベースをアクセスする場合、データベースが送信される要求に追いつけない場合があります。システム管理者がSQL データベースの管理者を兼任している場合でも、遠隔地のサーバーをモニタするのは困難です。また、データベース
サーバーやバック エンド サーバーが管理の管轄外の場合もあります。可能であれば、アプリケーションで使用するバック エンド サーバーもモニタして、Web サーバーと同様にチューニングを実施することをお勧めします。
サーバーの Web アプリケーションでボトルネックが発生しているかどうか確認するには、次のパフォーマンス カウンタをモニタします。
Active Server Pages: Requests/Sec、Active Server Pages: Requests Executing、Active
Server Pages: Request Wait Time、Active Server Pages: Request Execution Time、および
Active Server Pages: Requests Queued。サーバーで ASP アプリケーションを実行している場合、これらのカウンタを使用してアプリケーションの動作状況を確認できます。Active
Server Pages: Requests/Sec は静的ファイルや ASP 以外の動的コンテンツに対する要求をモニタしません。また、ASP ページの構造や
Web サーバーのキャパシティによってカウンタが大きく上下します。サーバーへのトラフィックが激しく増加している状況でこのカウンタが低い場合、アプリケーションがボトルネックとなっている可能性があります。Active
Server Pages: Requests Executing は現在実行されている要求数を示し、Active Server Pages: Request Wait
Time は最も最近の要求が待ち行列で待機した時間をミリ秒で示し、Active Server Pages: Request Execution Time は最も最近の要求の実行にかかった時間をミリ秒で示します。Active
Server Pages: Requests Queued と Active Server Pages: Request Wait Time は 0 に近い値が理想となりますが、実際には負荷によって上下します。Active
Server Pages: Requests Queued の最大値は、AspRequestQueueMax のメタベース設定で決まります。上限に達すると、クライアント
ブラウザは "HTTP 500/ ServerToo Busy." メッセージを表示します。これらの値が想定される範囲から大きく離れる場合、パフォーマンスを改善するために
ASP アプリケーションを設計しなおす必要があります。Active Server Pages: Request Execution Time は、平均値ではないので注意が必要です。たとえば、10
ミリ秒 (ms) で実行するページに対して 30 個の要求を受ける間に 500ms のページに対して 1 つの要求を受けた場合、実際の平均実行時間は 25ms
以上でもカウンタは 10ms を示します。Active Server Pages: Requests Executing の理想値は状況によって変化します。ページが素早く実行されて
I/O 待ち (ファイルの読み込みやデータベース クエリ) が発生しない場合、このカウンタは負荷をかけた状態のプロセッサ数と同程度の低い値を示します。ページで
I/O 待ちが発生すると、AspProcessorThreadMax 値にプロセッサ数を乗じた高い値になります。Active Server Pages: Requests
Executing と Active Server Pages: Requests Queued が高く、CPU 利用率が低い場合は AspProcessorThreadMax
を増やす必要があります。スレッド ゲート機能が有効に設定されていると、Active Server Pages: Requests Executing の最適化が試みられます。ユーザーの応答時間は
Active Server Pages: Request Wait Time、Active Server Pages: Request Execution Time
およびネットワーク レイテンシの時間を合計した値に比例します。
Web Service: CGI Requests/sec および Web Service: ISAPI Extension Requests/Sec
はサーバーが CGI および ISAPI アプリケーション要求を処理する比率を示します。高負荷時にこれらの値が低下する場合、コードの再設計が必要な場合があります。
メモ
ASP は ISAPI 拡張ですので、Web Service: ISAPI Extension Requests/Sec カウンタに含まれます。
Web Service: Get Requests/sec および Web Service: Post Requests/Sec はこれらの一般的な
HTTP 要求がサーバーに対して送信される秒レートを示します。POST 要求は一般的にフォームで使用され、ASP を含む ISAPI または CGI に送信されます。ブラウザから送信されるそのほかの要求の大半は
GET 要求で、静的ファイル、ASP やほかの ISAPI および CGI 要求が含まれます。
信頼性のモニタ
Microsoft® Windows® 2000 オペレーティング システムには、オペレーティング システムおよびコンピュータ全般のさまざまな状況をモニタするためのツールが含まれています。このホワイト
ペーパーでは、これらのツール、測定基準、および一般によくモニタされる状況について説明します。このホワイト ペーパーは、ツールのすべての機能についての詳細な解説を目的とするものではなく、最も一般的な測定条件を設定および管理するための参照用の資料として提供されています。
信頼性と可用性の測定基準
オペレーティング システム停止エラー
ほかのオペレーティング システムと同様、Windows NT および Windows 2000 でも、重大なエラー状況が発生し、応答しなくなることがあります。Windows
の停止エラーが発生すると、青い背景にテキストが表示されるので、よくブルー スクリーンと呼ばれます。また、このような状況は、バグ チェックとも呼ばれます。オペレーティング
システムの停止は、それほど頻繁には起こりませんが、定期的にモニタされる必要があります。
Windows停止エラーの発生に対処する手順についての詳細な説明は、このホワイト ペーパーでは行いません。停止エラーに関する情報を 
http://www.microsoft.com/japan/support の Microsoft Support Knowledge Base
から入手できます。特に、次の記事を参照してください。
192463. 
メモリ ダンプ後にブルー スクリーン情報を収集する
129845. 
ブルー スクリーン発生時、Microsoft に連絡して欲しい内容 
Q103059. Descriptions of Bug Codes for Windows NT
Windows Event Log サービスは、オペレーティング システムのクラッシュの履歴をモニタするのに便利なツールです。システムを再起動すると、停止エラーがイベント
ログに記録され、クラッシュ ダンプが永続ファイル (通常、Memory.dmp) に保存されます。詳細については、この文書の「イベント ログをデータ ソースとして使用する」の節の「ダンプの保存」の項を参照してください。
オペレーティング システムの再起動
Windows 2000 の再起動は、オペレーティング システムのアップグレード、ソフトウェアのインストール、およびハードウェアのメンテナンスなど、さまざまな理由で行われます。再起動は、システム
イベント ログに記録されます。システムの再起動の回数は、システムが安定している場合、少なくなります。したがって、履歴上の再起動の回数によって、システムおよびデータ
センターの安定性が長期的に示されます。詳細については、この文書の「イベント ログをデータ ソースとして使用する」の節の「スタートアップ イベント」の項を参照してください。
アプリケーション エラー
Windows 2000 では、ワトソン博士ユーティリティを使って、アプリケーションの障害が記録されます。このユーティリティによって、アプリケーションの障害ごとに、システムのルートにある
Drwtsn32.log ファイルに情報が追加されます。また、障害が発生したユーザー モード プログラムのメモリ ダンプを含む User.dmp ファイルも作成されます。
オペレーティング システムのクラッシュと同様に、アプリケーションのクラッシュに対処する手順についての詳細な説明は、このホワイト ペーパーの範囲外です。詳細については、Microsoft
Support Knowledge Base(英語版) の次の記事を参照してください。
Q94924. Postmortem Debugging Under Windows NT
141465. [NT] 
Dr. Watson エラーのデバッグ用シンボルのインストール方法
アプリケーションの障害は、アプリケーション イベント ログに記録されます。したがって、通常、これらのイベントの履歴回数を分析に使用することができます。詳細については、この文書の「イベント
ログをデータ ソースとして使用する」の節の「ワトソン博士イベント」の項を参照してください。
オペレーティング システムの可用性
ほとんどのユーザーは、Windows オペレーティング システムによって提供されるアプリケーション サービスの可用性に非常に関心を持っています。各アプリケーションには、通常、異なる計測方法が必要です。したがって、アプリケーションの可用性を直接計測するより、オペレーティング
システムの可用性を測定する方が現実的です。オペレーティング システムの可用性を測定するのに必要なイベントは、Windows システム イベント ログに含まれています。
計画可用性や総可用性など、種類の異なる可用性がいくつかあります。総可用性は、合計実行時間に対するアップタイムの割合として定義され、システム イベント ログの情報を使って簡単に計算することができます。
修復の平均時間
システムの可用性と回復可能性の間には、強力な相関関係があります。システムの回復可能性は、システムの停止後にシステムが使用不可能であった時間の長さとして測定されます。通常、これは、修復の平均時間として報告されます。Windows
2000 オペレーティング システム イベント ログを使うと、修復の平均時間を簡単に測定することができます。停止は、システムがシャットダウンしたときに始まり、システムが再起動したときに終わります。このようなイベントに関連付けられているタイムスタンプを調べる方法を理解するには、この文書の「イベント
ログをデータ ソースとして使用する」の節の「スタートアップ イベント」、「クリア シャットダウン イベント」および「ダーティ シャットダウン イベント」の項を参照してください。
イベント ログをデータソースとして使用する
イベント ビューアユーティリティ
Event Log サービスおよびイベント ビューアを使って、ハードウェア、ソフトウェア、およびシステムの問題に関する情報を収集し、Windows のセキュリティ
イベントをモニタすることができます。
Windows 2000 では、以下の 3 種類のログが記録されます。
アプリケーション ログ。アプリケーション ログには、アプリケーションまたはプログラムによって記録されるイベントが格納されます。たとえば、データベース
プログラムによって、アプリケーション ログにファイル エラーが記録されます。記録するイベントを決定するのは、プログラムの開発者です。
システム ログ。システム ログには、Windows システム コンポーネントによって記録されたイベントが格納されます。たとえば、起動時に読み込まれるドライバやその他のシステム
コンポーネントのエラーがシステム ログに記録されます。システム コンポーネントによって記録されるイベント タイプは、Windows によって事前に決定されています。
セキュリティ ログ。セキュリティ ログには、ファイルの作成、開閉、または削除など、リソースの使用に関連するイベントだけでなく、有効および無効なログオン試行回数などのセキュリティ
イベントが記録されます。管理者は、セキュリティ ログに記録するイベントを指定することができます。たとえば、ログオンの監査を行う場合、システムへのログオン試行回数がシステム
ログに記録されます。
イベント ビューアには、以下のようなイベントが表示されます。
エラー。データの損失や機能の損失などの重大な問題です。たとえば、スタートアップ時にサービスの読み込みに失敗すると、エラーが記録されます。
警告。必ずしも重大ではないが、今後問題となる可能性があるイベントです。たとえば、ディスク領域が少ない場合、警告が記録されます。
情報。アプリケーション、ドライバ、またはサービスの正常な操作を知らせるイベントです。たとえば、ネットワーク ドライバが正常に読み込まれると、情報イベントが記録されます。
成功の監査。監査されているセキュリティ アクセス試行で成功したものです。たとえば、ユーザーがシステムへのログオンに成功した場合は、成功の監査イベントとして記録されます。
失敗の監査。監査されているセキュリティ アクセス試行で失敗したものです。たとえば、ユーザーがネットワーク ドライブにアクセスしようとして失敗した場合、その試行は失敗の監査イベントとして記録されます。
Event Log サービスは、Windows を起動すると、自動的に開始されます。アプリケーションおよびシステム ログはすべてのユーザーに表示されますが、セキュリティ
ログには、管理者しかアクセスすることができません。
セキュリティ ログは既定でオフになっています。Windows 2000 グループ ポリシーを使って、セキュリティ ログをオンにすることができます。また、管理者は、セキュリティ
ログがいっぱいになるとシステムを停止させる監査ポリシーをレジストリ内に設定することもできます。グループ ポリシーの使用についての詳細は、Windows 2000
の解説書および 
http://www.microsoft.com/japan/windows2000/
の『 
Windows
2000 グループ ポリシー』を参照してください。
イベント ビューアを表示するには
[スタート] メニューで、[ファイル名を指定して実行] をクリックします。
"Eventvwr" と入力します。
[OK] をクリックします。イベント ビューアに次のように表示されます。