Features
Host your static site on Google App Engine and update it by pushing to GitHub.
DRY principle (set it up and forget)
Zero cost (thanks to Google App Engine)
Zero maintenance (thanks to GitHub)
No Python knowledge needed, but you need to know basics of Git
How it works
It is simple. Let's say you have GitHub repo containing static web site and you want to host it on App Engine. DryDrop is an application ready to be uploaded as your App Engine project. When you upload it first time, you should setup post-receive hook in your GitHub repo to point to your App Engine project, so every change you push to GitHub can be reflected on your App Engine site immediately.
Let's say someone visits your App Engine site. DryDrop has a simple cache. If requested page is not in the cache, DryDrop will try to fetch it from GitHub, store it in the cache and then serve it. Next time the same URL is requested, it will be served directly from DryDrop cache.
Let's say you did some changes to your files. In the moment you push file changes into GitHub, post-receive hook will ping DryDrop and that invalidates modified files in the cache. Next request will trigger downloading of fresh files from GitHub.
Installation
upload your static files as GitHub repository
create GAE project and upload DryDrop
point DryDrop site to your GitHub repo
(optional) setup post-receive hook in GitHub repo pointing to your DryDrop site
Since then, every change pushed to github project will automatically propagate to your static site hosted by Google.
Step 1: prepare your GitHub repository
You already know how to work with GitHub, right?
Let's say you are user darwin and created repository web-app-theme.
So, your repository's content lives at http://github.com/darwin/web-app-theme/tree/master
Step 2: create your App Engine project and upload DryDrop
Now you've created project called drydropsample like this:
Then make sure you have latest Google App Engine SDK available on your machine.
Then you have to download latest DryDrop and upload it to drydropsample project:
git clone git://github.com/darwin/drydrop.git
cd drydrop
rake upload project=drydropsample
Note: You will be prompted for user name and password for your Google account by appcfg.py script.
My session looked like this:
Now you can visit your App Engine site at http://drydropsample.appspot.com and you should see welcome page:
Step 3: point DryDrop site to your GitHub repo
Go to admin section of your DryDrop site and switch to settings page:
Set "Pull from" to http://github.com/darwin/web-app-theme/raw/master. That "raw" in the URL is important!!!
When you go back to http://drydropsample.appspot.com, you should see your repo's content (in case you have there index.html)
Step 4 (optional): setup post-receive hook in GitHub repo pointing to your DryDrop site
Go to Admin section of your GitHub repo:
Set http://drydropsample.appspot.com/hook/github as post-receive hook.
Step 5 (optional): test the hook
Now, let's try to push some change and check if it gets auto-published on http://drydropsample.appspot.com.
Push it to GitHub ...
When you revisit http://drydropsample.appspot.com, you should see updated version:
You can double check situation in admin section under Dashboard events:
Post-receive hook was triggered as you can see in the events list.
And that's it... Happy pushing! :-)
FAQ
Do I need to understand Python to use this?
Not at all. You just need to know how to use Git and how to create App Engine project on appspot.com.
How does DryDrop compare to GitHub Pages?
GitHub Pages is solving same need of "live-hosting of GitHub repository as a static site on custom domain". I've started this project before GitHub Pages was announced and GitHub pages made it somewhat obsolete, especially because they support jekyll, which is cool. But I still see two valid use cases: 1) you have public repo and you don't want to pay for CNAME support on GitHub 2) GitHub had some performance issues recently, App Engine works more reliably and is really fast.
How can DryDrop serve files from GitHub?
It is simple. DryDrop has a simple cache. If requested page is not in the cache, DryDrop will try to fetch it from GitHub, store it in the cache and then serve it. Next time the same URL is requested, it will be served directly from DryDrop cache. Let's say you did some changes to your files. In the moment you push file changes into GitHub, post-receive hook will call DryDrop and DryDrop will invalidate modified files in the cache.
What if I want pretty URLs or some kind of routing?
You can define site.yaml config file which defines mapping between your repository files and App Engine URLs. This config uses subset of App Engine's app.yaml syntax and is kept in your GitHub repo, so you don't need to re-upload DryDrop after changing it. See admin/settings section of your DryDrop site for more info.
What about markdown/textile or some kind of static site generator like jekyll?
You can use anything you want locally and push generated outputs into your github repo. You can point DryDrop site to subfolder of your GitHub repo, even to different branch, so you have quite flexible options how to keep original source with generated output in one repo. I'd prefer to keep DryDrop simple, but you are welcome to add support for your favorite stack.
Are you going to support bitbucket or some other code repository services?
Maybe, if there is a demand for it.
History
v0.2 (09.08.2009)
introducing support for GitHub and GitHub hooks
initial public version
v0.1 (13.12.2008)
initial experimental implementation