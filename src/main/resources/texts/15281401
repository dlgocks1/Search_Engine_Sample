＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
■■■■
■　　　　■　　　　　　　■　　　　　　　　■
■　　　　　　　　　　　■■■　　　　　　■■■
■　　　　■　　　　　　　■　　　　　　　　■
■■■■
～基礎から　★　Ｃ＋＋Ｐｒｏｇｒａｍｉｎｇ～
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
【注意】　このマガジンは、最大化してお読みください。
また、等角フォントでお読みください。
（ＭＳ　ゴシックなど）
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
発行者　　　　　　むーくん
マガジンＮＯ．　　アルゴリズム編 No.58 高速離散フーリエ変換
発行日　　　　　　02/10/31
講読人数　　　　　３８００名ぐらい
マガジンＩＤ　　　0000050494
このマガジンは、まぐまぐから配信されています。
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
★あいさつ★
プロバイダを乗り換えまして、ついに12MのADSLサービスが開通しました。
それでしばらく手間取ってたんですけど、やっぱり早いです。
実質3～4Mbpsしかでませんが、それでも今までの8倍ぐらいの早さです。
でも、もう慣れてしまいました ^^;
人間なんて欲深い生き物ですよねぇ。
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
■退職金くじ１０万円【この場】で当る！ http://www.jobfront.to/a.html
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
★目次★
・まえがき
・回転因子
・時間分割法
・バタフライ演算
・ビット逆順の方法
・まとめ
・サンプルプログラム
・今日のポイント
・予告
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
★まえがき★
前回、離散フーリエ変換を学習しました。
離散フーリエ変換とは、信号を周波数成分で表すことでしたね。
しかし、離散フーリエ変換はデータ数の2乗に比例する計算量が必要で、
たくさんのサンプル点をとると凄まじい計算をしなければならず
時間がかかってしまい、実用にはなりません。
今回はうまい方法を用いて高速に離散フーリエ変換を行う
アルゴリズムを学習します。
これを高速フーリエ変換といい、FFTと書かれることが多いです。
FFTは計算量がO(n logn)、となるため、
O(n^2)のDFTに比べかなり効率がよい方法です。
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
★回転因子★
＃この節は以前の復習です
No.55で紹介しましたが、exp(ix)は周期2πの周期関数です。
ここで、exp[-i(2π/P)K]を W_P_K と置く、とお話ししました。
これを回転因子と呼びます。
回転因子は今回たくさん使いますので、
その基本的な性質も振り返っておきます。
[1]周期性
W_P_[K±P] = W_P_K
一周(2π)回ると元に戻る
[2]対称性
W_P_[K±P/2] = -W_P_K
半周(π)回ると符号が反転する
[3]指数性
W_P_[A+B] = W_P_A・W_P_B
指数法則が成り立つ
これを頭に入れながら読んでください。
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
★時間分割法★
離散フーリエ変換の式はa_m = 1/P Σ[n = 0～P-1] F_n・W_P_(nm)ですが
当然の事ながら、Σ[n = 0～P-1] F_n・W_P_(nm)の項を早く処理することが
ポイントになります。
理由は後に判明しますが、FFTではデータ数は2の累乗個に制限されます。
例えば、2,4,8,16,32,64,128,256,512,1024,2048,4096,8192・・・個などです。
サンプリングしたデータ(fo,f1,f2,f3,f4・・・f_(P-1))を
偶数番目(EVEN)と奇数番目(ODD)と別々に分割し、DFTを行ってみます。
＃サンプリングデータ数はP個ですね。
すると、a_m = 1/P (偶数列 + 奇数列) と書くことができます。
ここで、偶数列はfE,奇数列はfOとして新たに添え字を付け直すと
fEo = fo, fE1 = f2, fE2 = f3, ・・・, fE((p/2)-1) = fp-2
fOo = f1, fO1 = f3, fO2 = f5, ・・・, fE((p/2)-1) = fp-1
と書くことができます。
これを先ほど偶数列と奇数列に分割した式に代入すると
a_m = 1/P [ Σ[n = 0～(P/2)-1] fEn・W_P_(2nm) 
+ Σ[n = 0～(P/2)-1] fOn・W_P_((2n+1)m) ]
となります。
ここで、定義より W_P_(2MN) = W_(P/2)_(MN) なので
これを上式に代入すると
a_m = 1/P [ Σ[n = 0～(P/2)-1] fEn・W_(P/2)_(nm) 
+ W_P_m Σ[n = 0～(P/2)-1] fOn・W_(P/2)_(nm) ]
となります。
この式では分かりにくいので、偶数部分をa_Em,奇数部分をa_Omとおきます。
a_m = 1/P [ a_Em + W_P_m・a_Om ]　となります。
指数関数には周期性があるので、W_P_(K+P/2) = - W_P_Kとなりますから
{ a_m = 1/P [ a_Em + W_P_m・a_Om ]
{ a_(m+P/2) = 1/P [ a_Em - W_P_m・a_Om ]
となります。
次節からは、全てのデータを1/P倍しているものとして
1/Pを省いて書くことにします。
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
★バタフライ演算★
では、 { a_m = a_Em + W_P_m・a_Om
{ a_(m+P/2) = a_Em - W_P_m・a_Om
という式を用いて、どのように高速演算を行うのかを考えてみます。
データ数は2の累乗でなければならないので、
とりあえず2^3 = 8個の場合を考えてみることにしましょう。
データ列は(fo,f1,f2,f3,f4,f5,f6,f7)で表されます。
これを偶数列、奇数列に並べ直すことを繰り返してみましょう。
一回目 (fo,f2,f4,f6) 　(f1,f3,f5,f7)
これを更に、奇数列、偶数列に分けます。
二回目 (fo,f4) (f2,f6) (f1,f5) (f3,f7)
となります。
このように、最終的には２データのDFTにすることができ
これは以下のように簡単に解くことができます。
────────────────────────────────────
foとf4について２データのDFTを行ったとしましょう。
すると
fa = fo・W_2_0 + f4・W_2_0 = fo + f4
fb = fo・W_2_0 + f4・W_2_1 = fo - f4
となります。
────────────────────────────────────
このような演算を「バタフライ演算」と呼び、
よく下のような図で表されます。
http://members.tripod.co.jp/mukun_mmg/mmg/bncpp/graph_al058a.gif
＃この図は、矢印が示すように上下の値を加算するという意味で、
下付の数字はそこの数字を掛けてから足す、という意味です。
同様に計算を続けていくと、８データのバタフライ演算は
以下のような図で表されます。
http://members.tripod.co.jp/mukun_mmg/mmg/bncpp/graph_al058b.gif
まず1段階目として、2データのDFTを4つ行います。
2段階目として、得られた結果を用い、4データのDFTを2つ行います。
3段階目として、同じように8データのDFTを1つ行います。
＃これでデータ数が２の累乗個で無ければならない理由が分かりましたね。
２の累乗個でなければ
最終的に２データのDFTに帰着することができないからです。
図を見れば分かるように、
DFTに必要な回転因子の数はW_8_0～W_8_3までの４個で済みます。
＃つまりデータ数をPとすれば、P/2種類です。
また、 W_4_n は W_8_2n と同じですので、
回転因子の性質を用いれば同一のものと見なせます。
この値をどこかのテーブルに保存しておけば
更に計算速度を向上させることができます。
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
★ビット逆順の方法★
http://members.tripod.co.jp/mukun_mmg/mmg/bncpp/graph_al058b.gif
を用いてバタフライ演算を行うには、
データ数が２個になるまで、データを偶数番目・奇数番目に取ることを繰り返し
(fo,f4) (f2,f6) (f1,f5) (f3,f7)
のように並び替えなければなりませんでした。
かなり面倒な操作に見えますが、実はこれ、簡単に行う方法があります。
データ番号を2進数に直し、これを反転すると上記のような並びになります。
例えば、データ数8の場合でやってみましょう
2進数　　反転　　結果
0　→　000　→　000　→　0
1　→　001　→　100　→　4
2　→　010　→　010　→　2
3　→　011　→　110　→　6
4　→　100　→　001　→　1
5　→　101　→　101　→　5
6　→　110　→　011　→　3
7　→　111　→　111　→　7
これにより、見事(fo,f4) (f2,f6) (f1,f5) (f3,f7)の順に並んでいます。
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
★まとめ★
FFTのアルゴリズムをまとめてみます。
2^kのデータ数でサンプリングを行う
↓
ビット逆順の方法で、データを並び替える
↓
バタフライ演算を行う
という流れになります。
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
★サンプルプログラム★
関数f(n)をFFTするプログラムを作成します。
ある観測波形を周期間で8点サンプリングしたところ、
以下のようなデータが得られました。
[2.0, 1/√2, -3.0, 1/√2, 2.0, -1/√2, -1.0, -1/√2]
このデータより、元の波形を求めます。
─[プログラム例]────────────────────────────
#include<iostream>
#include<cmath>
using namespace std;
const double PI = 3.1415926535; /* 円周率の定義 */
const int K = 3; /* データ数2^K個 */
const int P = 8; /* データ数P個 */
/* サンプリングデータ */
static double dr[P] = { 2.0, 0.707, -3.0, 0.707, /* 実数部 */
2.0, -0.707, -1.0, -0.707 };
static double di[P] = { 0.0, 0.0, 0.0, 0.0, /* 虚数部 */
0.0, 0.0, 0.0, 0.0 }; 
static double wr[P/2],wi[P/2]; /* 回転因子 */
void swap(double& a,double& b){ /* データ入れ替え */
double t;
t=a; a=b; b=t;
return;
}
void divP(){ /* 全データを1/P倍する */
int i;
for(i=0;i<P;i++) dr[i] /= P;
}
void reverseBit(){ /* ビット逆順の方法 */
int i,j,k;
j=0;
for(i=0; i<=P-2; i++){
if(i<j) swap(dr[i],dr[j]); /* データを入れ替える */
k = P/2;
while(k<=j){
j -= k;
k /= 2;
}
j += k;
}
}
void butterfly(int t,double q,int a,int b){ /* バタフライ演算 */
int m;
double ra,rb,ia,ib; /* 一時的に値を保持 */
m = t * q; /* m番目の回転因子 */
ra = dr[a] + dr[b]*wr[m] - di[b]*wi[m]; /* バタフライ演算 */
ia = di[a] + dr[b]*wi[m] + di[b]*wr[m];
rb = dr[a] - dr[b]*wr[m] + di[b]*wi[m];
ib = di[a] - dr[b]*wi[m] - di[b]*wr[m];
dr[a] = ra; /* a番目の実数部値を記録 */
di[a] = ia; /* a番目の虚数部値を記録 */
dr[b] = rb; /* b番目の実数部値を記録 */
di[b] = ib; /* b番目の虚数部値を記録 */
}
void dft(){ /* DFT変換を行う */
int a,b,i,j,k;
double w,q,t;
for(i=0; i<P/2; i++){ /* 回転因子の記録 */
w = -2.0 * PI / P * i; /* exp(-ix)の引数 */
wr[i] = cos(w); /* 実数部 */
wi[i] = sin(w); /* 虚数部 */
}
for(i=0; i<K; i++){ /* データ数のビット数段階DFTを行う */
t = pow(2.0, i); /* DFTのデータ数 */
q = pow(2.0, K-i-1.0); /* DFTの個数 */
for(j=0; j<q; j++){ /* DFTの個数だけ繰り返す */
for(k=0; k<t; k++){ /* DFTのデータ数回繰り返す */
a = j * 2.0 * t + k; /* DFTする位置 */
b = a + t; /* もう一つの位置 */
butterfly(k,q,a,b); /* バタフライ演算 */
}
}
}
}
int main(){
int i;
divP(); /* 全データを1/P倍する */
reverseBit(); /* ビット逆順の方法 */
dft(); /* dft演算 */ 
cout << "次数\tREAL\tIMAGINARY" << endl;
for(i=0;i<P;i++){
cout.precision(3); /* 表示 */
cout.setf(ios::fixed);
cout << i << '\t' << dr[i] << '\t' << di[i] << endl;
}
return 0;
}
─[解説・ビット逆順の方法]───────────────────────
今回は高速にビット逆順の方法を行うアルゴリズムを採用しています。
データ数が８個の場合、
(fo,f1,f2,f3,f4,f5,f6,f7) を (fo,f4,f2,f6,f1,f5,f3,f7)と入れ替えますが、
これをよく観察すると、 f1←→f4, f3←→f6 を入れ替えれば
よいということが分かります。
このアルゴリズムを適用すると、
(i,j)=(1,4), (i,j)=(3,6)の時に i<jとなるので
そのときデータを入れ替えてやればいいことが分かります。
テクニカルな方法で非常に分かりにくいので、
実際にやってみた方が分かると思います。
─[解説・DFT変換部]──────────────────────────
まず最初に、回転因子を求めています。
実数部はcosで、虚数部はsinになりますね。
上で述べたように、回転因子は最大でP/2種類となります。
次に、図http://members.tripod.co.jp/mukun_mmg/mmg/bncpp/graph_al058b.gif
で示したように、
まず、２データのDFTを4つ行います。
このとき、t=2, q=4となるように値を求めています。
次は４データのDFTを2つ行うのでt=4, q=2となるようにします。
更に最後は８データのDFTを1つ行うので、t=8, q=1となるようにしています。
後は条件通りにバタフライ演算を行うだけです。
─[実行結果]──────────────────────────────
次数 REAL IMAGINARY
0 0.000 0.000
1 -0.000 0.000
2 1.000 0.000
3 0.000 -0.500
4 0.000 0.000
5 -0.000 0.500
6 1.000 0.000
7 -0.000 -0.000
前回と同じように考えると、
f(t) = exp(i2t) - i・0.5・exp(i3t) + i・0.5・exp(i5t) + exp(i6t)
となるので、オイラーの公式で展開すると
f(t) = 2cos(2t) + sin(3t)
となります。
よって、元の信号は 2cos(2t) + sin(3t) であることが分かりました。
────────────────────────────────────
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
★今日のポイント★
・FFTは高速離散フーリエ変換といって、
O(n logn)の計算量でDFTを行うアルゴリズムである。
・FFTでは2の累乗個のデータ数しか扱うことができない
・FFTはΣW_P_(nm)の項を、バタフライ演算によって高速化している
・回転因子は、データ数をPとすると、P/2種類になる
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
★予告★
練習問題を行います
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
講読解除はこちら
http://web1.freecom.ne.jp/~mu-home/mmg/cpp.html
バックナンバーはこちら
http://web1.freecom.ne.jp/~mu-home/mmg/cpp.html
内容について質問やご意見など
smukun.com
筆者のホームページ（むーくんの理学的なんでも講座）
http://www.hello.sh/nandemo/
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊