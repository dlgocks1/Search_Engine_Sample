このサイトは、もともと作者の自分用メモとして書き始めたものです。書いてあることが全て正しいとは限りません。他の文献、オフィシャルなサイトも確認して、自己責任にて利用してください。
1台のマシン上で Linux や別の OS を複数稼働させることのできる仮想化技術。最近は VMWare もかなりパフォーマンスが改善されたが (※)、Xen は OS上のOS だということをほとんど意識させないオーバーヘッドの少なさが売りだ。また、ひとつの基幹サービス (たとえば Webサービス) を OSごと根こそぎ分離するという用途においては、Xen は chroot の究極のカタチであるとも言える。Xen では、ゲストOS (子供) とホストOS (親) はカーネルもライブラリもそれぞれで持ち、ゲストは他のゲストやホストのリソースにほとんど影響を与えられないようにできているからだ。
また、例えば Apache HTTPSサービスと NFSサービスを提供したい時、ゲストOS 1 は Apache 専用にして CPU を 2個割り当ててメモリ割り当ても多めに、ゲストOS 2 は NFS 専用で CPU はひとつだけでメモリ割り当ても控えめだが多くのディスク容量を与えておく、というようにリソースを最適にコントロールして、サーバマシンの持つ CPU 能力とディスク I/O を余すところなく活用することができる。さらには、サービスの提供を続けたままゲストOS を物理的に別の Xenホストマシンへ移動すること (Live Migration) も可能 (じつはこれが Xen 開発の本来の目的らしい)。ハードウェアのアップグレードやハードウェア障害 (部分的か比較的軽症の障害に限られるが) への備えとしても心強いし、コールドバックアップならホストOS上の標準的なツールで簡単にゲストOS のバックアップがとれるというメリットもある。
※ VMware といえば、一昔前まではまさに Windows の上にインストールして仮想ハードウェアを提供するカタチのものだけだったが、今は 2種類あり、そのひとつ VMware ESX はほとんど Xen と同じ構造 (ハイパーバイザ方式) で動作し、仮想化OS のオーバーヘッドはかなり小さい。旧来の方式のものは VMware Server としてフリーで配布されている。
当ページは、CentOS 5.1, Fedora Core 7, Fedora Core 8, RedHat Enterprise Linux 4.5(ゲスト専用) を組み合わせて準仮想化 (paravirtualization = パラバーチャライゼーション) で動かした実験に基づく。
Xen ではホストOS を dom0 (Domain-0) と呼ぶので、ここからは主にそちらの呼び方を使うことにする。また、ゲストOS は ゲストドメイン あるいは domain-U, domU とも呼ぶ。
Xen の仕組みを理解する上でうってつけの記事として Xen特集 - VA Linux Systems Japan がある。IT系ポータルの記事はだいたい寸止め以下のスカスカなものばかりだが、これは珍しく役に立つ。
方針と作業概要
ゲストOS は準仮想化 (paravirtualization) で動かす。Xen に 対応した Linux を完全仮想化 (Full Virtualization) で動かすのは愚か者のすること。パフォーマンスを落とすだけだ。別途、Windows Server 2003 を完全仮想化でインストールする試験もやってみたが、それについてはメモ書き程度に添えることにする (その時のハードウェアは AMD Athlon 64 X2 4200+ [OPN: ADO4200DOBOX] ＋ ASUS M2A-VM)。 
ゲストOS のインストールは基本的に GUI ツール virt-manager (仮想マシンマネージャ, Virtual Machine Manager とも呼ぶ) かコマンドラインツール virt-install を利用。
仮想マシンマネージャ でのインストールソースとしては dom0 上の NFSサーバを使う。
ゲストOS は各々独立したパーティションにインストールし、dom0 にそれらパーティションを仮想ディスク (VBD = 仮想ブロックデバイス) として提供させる。ディスクイメージファイル方式 (tap:aio) よりロード時間も I/O パフォーマンスも高いはず。
ゲストOS の操作やメンテナンスは dom0 や別マシンから VNC でグラフィカルに行えるようにする。 
ホストOSのインストール
まず、dom0 となるホストOS をインストールする。CentOS 5.1 と、 Fedora Core の 7 と 8 を試した。この時の Xen のバージョンは、CentOS 5.1 のものが 3.0.3、Fedora Core 7 と 8 では 3.1.2 だった。
インストール
幾つかコツや認識しておかなければならないことがある。
Xen のログ書き出し先と、場合によっては後述するインストールメディアのコピー先領域が要るので、dom0 用には 10～20GB のパーティションを確保。ゲストOS をディスクイメージファイルとしてインストールしたい場合には、イメージサイズ分を上乗せしなければならない。ホストOS のファイルシステムを複数のパーティションに分けたい場合で、なお且つ、ゲストOS をディスクイメージファイルとしてインストールしたい場合には、ゲストOSイメージファイルのデフォルト位置が /var/lib/xen/images/ なので、/var パーティションをかなり大きく取っておく必要がある。2 GB 程度のスワップ領域も作成しておく。残りのディスク領域はゲストOS 本体やそのスワップ領域用にフリースペースとして遊ばせておく。ゲストドメインをディスク上でどうレイアウトするかのイメージを先に掴んでおきたければこちら。
dom0 はゲストOS のマネージメントに専念させる。不要なサービスはゲストに与えるべきリソースを消費し、セキュリティリスクにもつながるので、なるべくインストールしない・動かさない。例外は ssh サービスと nfsd、オプションで VNCサーバくらいだろう。
Xen dom0 に必須なものやあったほうがパッケージ；
Gnomeデスクトップ パッケージグループ (ゲストOS のインストールや保守に必要) 
X-window パッケージグループの vnc パッケージ (VNCクライアント - RealVNC)
開発ツール パッケージグループ (gcc が必須)
開発ライブラリ パッケージグループ (zlib-devel と python-devel が必須)
仮想化 パッケージグループ (Xen版カーネルと xend, libvirt をはじめとしたツールやライブラリ)
ネットワークサーバ パッケージグループ (NFS。vnc-server パッケージもあれば便利) 
レガシーなネットワークサーバ (適宜。dom0 ではほとんど用途がないが...) 
Xen の動作に必要なものは他に以下のものがあるが、前のリストで選択したものやベースグループに含まれているはずだ;
iproute2 パッケージ (ip コマンド)
bridge-utils パッケージ
hotplug フレームワーク (udev に含まれる)
OS のインストーラが完了したら、土台がきちんと整うまでは Xenカーネルでブートしたくない。ところが、CentOS 5.1 では、仮想化 パッケージグループを選択すると、不親切なことにノーマルカーネルはインストールしてくれない (Fedora Core 8 でも同様。FC7 では...忘れた)。メンテナンス用にどうしても入れておきたいのだ。そこで以下のような追加手順を踏む。こんな面倒くさいことをせずに、Xenカーネルデーブートした dom0 上から yum で install してもいい。
OSインストーラ最終の 再起動 ボタンを押したら、Xenカーネルでブートしないよう、[F2] や Del キーで BIOS へ逃げるか、Grub の OS選択画面で Tab キーを押して割り込んでから、マシンの電源ボタンで電源を切る。この時、OS のインストールDVD (CD) はトレーに入れたままにする。
インストールメディアからレスキューモードでマシンをブートする (boot: プロンプトで `linux rescue')。
「ハードディスク上のOSをマウントするか」と訊かれたら yes。ハードディスク上のルートパーティションが /mnt/sysimage にマウントされる。
インストールメディアをマウントし、必要なカーネルパッケージをハードディスクへコピーする。
sh-# mount /dev/scd0 /mnt/source
sh-# cd /mnt/source/CentOS
sh-# cp kernel{,-devel,-doc}-2.6.*.rpm /mnt/sysimage/root
sh-# umount /mnt/source
ハードディスク上のシステムへ chroot してインストールを実行する。
sh-# chroot /mnt/sysimage
sh-# rpm -ivh --nosignature /root/*.rpm
sh-# exit <--chrootから脱出
sh-# exit <--リブート
再び Grub のOSメニューで Tab キーを押し、次の支度のために非Xenカーネルのほうでブートする。
基本設定
非Xenカーネルでブートし、ホストOS の基本的な設定を済ませておく。
ネットワーク
まずはともかく、実在のネットワークインターフェイスに呼応するデバイス (eth0 など) ができているかを確認する (ifconfig コマンドなど)。最新のマザーボードに搭載されているギガビットNIC は、OSディストリビューションがまだドライバを持っていないこともあるからだ。NIC を認識しないことにはこの先に進めないので、ここで整備を済ませておかなくてはならない。必要ならばドライバをインストールし、(現実の) IPアドレス、ゲートウェイ、ホスト名をしっかり設定しておく。この情報は Xen dom0 のものにもなる。
また、IPv6 は Xen ではまだ不安定らしいので、特段使う予定がないのであれば、無効化するため /etc/modprobe.conf に；
alias net-pf-10 off
を書き加えておく。
基本的な起動設定
安全のため、この段階ではまだ暫くはノーマルカーネルでブートし続けてほしいので、/boot/grub/grub.conf に変更を加える。非Xenカーネルでブートすればメモリを独り占めできるため様々な基礎構築作業がスピードアップできるという点も見逃せない。
default=0 <--xenカーネルでないほうのエントリ番号をデフォルトにする
timeout=15 <--延ばしておくとよい
splashimage=(hd0,0)/grub/splash.xpm.gz
#hiddenmenu <--コメントアウトして必ずカーネルリストが出るようにする
title CentOS (2.6.18-53.el5)
root (hd0,0)
kernel /vmlinuz-2.6.18-53.el5 ro root=LABEL=/ rhgb quiet
initrd /initrd-2.6.18-53.el5.img
title CentOS (2.6.18-53.el5xen)
root (hd0,0)
kernel /xen.gz-2.6.18-53.el5 dom0_mem=350M <--dom0への割り当てメモリ
module /vmlinuz-2.6.18-53.el5xen ro root=LABEL=/ rhgb quiet
module /initrd-2.6.18-53.el5xen.img
dom0 への割り当てメモリは、あまり欲張るとゲストドメインへ割り当てるメモリが逼迫してしまう。ゲストドメインのメモリは dom0 から分け与えられるのではない。dom0 とすべてのゲストドメインへの割り当てメモリが搭載物理メモリ量とちょうどイコールになるのが理想だ。
なお、次の段階でカーネルをアップデートすると、yum 及び rpm がまた Xenカーネルのほうをデフォルトにしてしまう。それを防ぐには /etc/sysconfig/kernel ファイルのパラメータを変更しておく；
UPDATEDEFAULT=kernel <--`-xen' を取る
ここで行った非Xenカーネル優先の起動設定は、この後の適当な段階で戻すといいだろう。
その他
/etc/inittab を編集してデフォルトinitレベルを 3 にしておく。そうすれば、実運用に入る時に dom0 へのメモリ割り当てをもっと減らすこともできる。
また、スタートアップで起動されるデーモンも極力減らしておく。ただし、この段階で完全に絞り込めなくても、あとでじっくり煮詰めていけばいい。
主要パッケージのアップデート
Xen は日進月歩の勢いで変わって行っているので、おかしなバグに捕まらないよう、この段階で少なくとも主要なコンポーネントだけはアップデートしておくことをお勧めする (yum などを使って)。Xen に何らかのカタチで関わるクリティカルなものとしては、だいたい以下のようなところか。CentOS 5.1 で kernel-xen をアップデートした時、前項「基本設定」で Xenカーネルのカーネルパラメータに足した dom0_mem の記述が新Xenカーネルのエントリに引き継がれなかったことがあるので注意しなければならない。残りの有象無象は後でじっくりアップデートすればいい。