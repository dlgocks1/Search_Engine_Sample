昨今、ウェブデザイナー／ウェブ担当者の間では、情報アーキテクチャ（IA：インフォメーションアーキテクチャ）という言葉が普通に使われるようになりました。「インフォメーションアーキテクト」という肩書きを持つ人も増え、コミュニティの中で勉強会や情報交換が行われたり、IAをテーマにしたイベントが開催されたりしています。
CSS Nite LP, Disk 7「IAスペシャル」
DESIGN IT! Forum 2009 - 企業情報の構造改革：DITA-XML-CMSによるコンテンツマネジメント戦略 -
情報アーキテクチャという概念や基本的な方法論の普及には、ソシオメディアが監修・翻訳に携わった『 "Web 情報アーキテクチャ" 』という書籍の存在も少なからず貢献したのではないかと思います。
しかし、私たちソシオメディアが日頃様々な情報システムのデザインコンサルティングを行う中で感じることは、「情報アーキテクチャ」において必要とされるデザインの領域が、一般的に考えられているものから、かなり変化してきているのではないかということです。
これまでの情報アーキテクチャ
情報アーキテクチャが対象とする範囲については、決まった定義があるわけではありませんが、一般的に情報アーキテクチャとは、次のようなデザイン領域／作業を指すのではないでしょうか。
コンテンツの分類
サイトマップの作成
ナビゲーションスキームの定義
ページのおおよそのレイアウト
これらの作業は今後もウェブベースのメディアを設計する上で必要なものだと思いますが、今後は、これらを静的なものとしてではなく、動的なものとして捉える必要があると考えます。
広告／広報メディアから、アプリケーションとしての情報システムへ
90年代にウェブが普及し始めた頃、ウェブサイトの設計において課題になったのは、ハイパーテキストという自由度の高い世界で、いかにしてユーザーを迷子にさせないようにするか、ということでした。本や映像といった従来のリニアな世界ではなく、ハイパーテキストという「どこにでも移動できる」世界にコンテンツを展開する上では、きちんと整理された分類とナビゲーションが必要だということになりました。
そこでとられた基本的な方法論は、コンテンツを排他的なカテゴリーで分類し、それをツリー構造に配置し、その構造を視覚的に反映したナビゲーションメニューを一定の表現でページ内に配置することでした。自由度の高すぎるハイパーリンクを一定のナビゲーションスキームに限定し、それを目に見えるようにすることで、サイト内の構成と目的地までの道筋を示したわけです。
この方法論は、コンテンツが基本的に非定形的で、その量も限定的な、「広告／広報メディアとしてのウェブサイト」には有効です。しかし、 "次世代ウェブ標準" が普及し、ウェブが膨大な情報データベースの CRUD（Create：作成、Read：読み出し、Update：更新、Delete：削除）を行う「アプリケーション」として活用されていく上では、必ずしも有効ではありません。なぜならアプリケーションとしての情報システムでは、コンテンツの分類もナビゲーションもレイアウトも固定的ではなく、ユーザーの目的や環境に応じてダイナミックに変化するものだからです。
コンテンツがいくつかの条件に応じてデータベースから動的に抽出されるとすれば、もはやサイト全体を二次元の静的な空間として表すサイトマップは意味を成しません。各ページが物理的な階層構造の中に配置されているというメタファーが適当でないからです。同様に、印刷物の台割のように、コンテンツの並べ方や個々のレイアウトを固定的に決めてしまうような作業も意味を成さないでしょう。
むしろ、ユーザーの操作に応じてスクリーンの状態がどのように変化していくのかという状態遷移のモデリングや、ユーザーが目的を達成するためにどのような意思決定ステップを踏むのかといった条件分岐フローのモデリングが重要になってくるはずです。
CMS と情報アーキテクチャ
ウェブサイトの管理に CMS を導入することは、もはや当然のことのようになっています。CMS のコンセプトは、コンテンツをデータベースに格納して、表示形式をテンプレートとして別に管理し、様々な状況に応じてこれらを柔軟に組み合わせて出力できるようにすることです。コンテンツの作成／入力作業の労力を減らし、情報原本の一元化を実現し、ワークフローをシステム化し、そしてデザインの一貫性を高めることです。このようなコンセプトの有用性は、ブログツールや Wiki ツールの普及もあって、多くの人々に認識されるようになりました。
また昨今では、RSS や各種ウェブサービスの API 公開など、コンテンツの構造化データを「そのサイトの運営者が指定した表示方法」と切り離して提供することも一般的になっています。つまりこれからのウェブシステムの情報アーキテクチャでは、「コンテンツ」「ナビゲーション」「レイアウト」を一体化して考えるのではなく、もっとメタな視点でこれらを捉えていく必要があります。
別な言い方をすれば、データベースに格納するコンテンツの形態は永続的なもの（データ自体は計画的に破棄されるとしても）として設計し、ナビゲーションやレイアウトは将来変化することを前提に設計しなければならないのです。
そこで我々は、情報アーキテクチャの新たな包括範囲として、次のような作業領域を含める必要があると考えています。
1. ユーザーの検索ニーズの分析
その情報システムを利用して、ユーザーが何をどのように検索（ナビゲーションを含む）を行いたいのかを分析します。これは検索行為に関する要求分析ですが、当然、検索した結果をもとにユーザーがどのようなビジネスゴール／ライフゴールを目指すのかという、ユースケース全体の分析が必要です。
また、そもそもユーザーが検索したいのはどういう単位の情報なのかということも分析する必要があります。つまりデータベース化する情報の代表的なエンティティを定義する作業です。これがデータベースの基本設計となるはずです。例えば Amazon のようなシステムを考えるとまず「商品」という単位のエンティティがあります。そして目的の商品を検索／レコメンドするためのエンティティとして、「ユーザー（アカウント）」「著者」「出版社／メーカー」といったものが存在しているはずです。つまり、いわゆるオブジェクト分析を行う必要があります。
ユースケース分析やオブジェクト分析は、従来、バックエンドのプログラムを設計するエンジニアが担当するものでした。しかしこれらはシステムの世界観やユーザーにとっての利便性に直結するため、情報アーキテクチャのデザイナーも関与することが望ましいでしょう。
2. ドキュメント分析
そのシステムで扱う（データベースに格納する）情報が、現在どのような形で存在されているか。またそれらをデジタルデータとして検索可能にするために、どのような分類軸が必要かを分析します。
ツリー構造の情報分類では、基本的に MECE（Mutually Exclusive, Collectively Exhaustive：網羅的かつ排他的）に情報を分類していましたが、より柔軟な検索を可能にするためには、ファセット分類（複数の分類軸を規定し、その値を属性として各コンテンツに持たせる）によって情報を多角的に分類することが基本となります。
また、「ユーザーの検索ニーズの分析」によって明らかになった要求事項と、実際のドキュメントとの対応のギャップをここで検証し、それを埋める方策を検討します。
例えば、現在社内のファイルサーバーに PowerPoint のドキュメントとして商品ごとの営業資料がいくつも格納されていたとします。各資料には、商品ごとの「提案書ひな形」「商品スペック」「利用マニュアル」「価格表」「商品ロゴなどの画像データ」がまとまって記載されていたとします。この状態をそのままデータベースに格納した場合、「A商品の営業資料」という切り口では検索できますが、「全商品の横断的なスペック一覧」という切り口では検索できません。もしそのような検索ニーズがあった場合には、元の PowerPoint の内容を分解して、「スペック」「マニュアル」「価格表」といった切り口で情報を整理し直す必要がでてきます。
フォークソノミーとして知られる「タギング」についても、その仕組みを導入するのであれば、ファセット分類と併せて仕様を検討する必要があるでしょう。
3. ダイナミックなテンプレートの設計
ダイナミックな情報システムでは、テンプレート自体が動的なものになります。ブログのように、「1記事＝1ページ」というような単純なものではなく、前述のように状況に応じて複数のレコードの内容を組み合わせてひとつのページが生成される場合、そのバリエーションや条件分岐などを定義する必要があります。例えば、データベースにテーブルとして存在していないオブジェクトについても、関連するテーブルから動的にデータを収集して（あたかもそれがレコードとして存在するかのように）1ページとして生成する必要があるかもしれません。
ナビゲーションについても、従来のように固定的な階層ごとのグルーピング項目を並べるのではなく、ユーザーの操作の状態に応じてダイナミックに変化するものが必要かもしれません。逆に、自由度がありすぎるユーザーインターフェースでは、「データベースの管理者画面」のようになってしまって、一般には分かりにくいかもしれません。そのような場合は、内部的にはファセット分類による検索を行っていたとしても、表示のテンプレートとしてはツリー構造の階層表現をとるのがよいかもしれません。
動的にテンプレートを生成するのに、これまでは主にサーバーサイドの技術を用いてきましたが、最近では JavaScript と CSS によってクライアントサイドで表示内容を動的に変更する方法も普及してきました。ユーザーの操作性を考えながら、ある画面の状態をどのような技術で実現するのべきなのかということも検討しなければなりません。またパッケージ製品や ASP／SaaS においては、ユーザーが表示項目やレイアウトをカスタマイズできるようにする場合もあるため、CSS のスキームとともに、画面構成要素のコンポーネント化を慎重に行う必要があるでしょう。
その他、見た目を実現するためのテンプレートではなく、ウェブサービスとしての API の定義も情報アーキテクチャの領域だと思います。API からアクセス可能なデータをどの範囲に制限するか、オリジナルのサイトのみで実現する機能は何か、といったことを決めるのは、ユーザーにとってのシステム像を定義する作業の一環だからです。
DESIGN IT! Forum 2009 へ
2009年8月27日（木）、28日（金）に開催のイベント「DESIGN IT! Forum 2009 - 企業情報の構造改革：DITA-XML-CMSによるコンテンツマネジメント戦略 -」（主催 DESIGN IT!, LLC.）では、ウェブ制作関連、CMS企業、XML専門家、マニュアル等ドキュメント管理など、日本では分断されている分野を、コンテンツマネジメント（DITA）、情報アークテクチャ（情報マッピング・ドキュメント分析）、ユーザビリティ（タスク分析）などの視点から、海外・国内の専門情報やノウハウとしてご紹介いたします。
また、それらの技術や情報の普及を目指すと同時に、様々な立場の方々の交流の場を提供いたします。
今回書いたような、情報アーキテクチャの新たな領域に関する実践的なノウハウを吸収していただけると思いますので、是非ご参加ください。開催が迫っております。お申し込みはどうぞお早めに！
DESIGN IT! Fourm 2009 の内容とお申し込み