An updated version of the prototype Canvas 3D extension is finally available, with a good number of improvements.  Many of these came from Ilmari Heikkinen, who's done some great work in fixing bugs and plugging holes/errors in the implementation.  Also, with this release, support for the OpenGL ES 1.1-based context has been dropped, in order to focus on the more forward-looking ES 2.0-based work.  You can download the new release (0.4.2) here.
There are a few changes in this version from the API mapping and description I posted earlier.  One of the things I mentioned in that original post was changing some functions to try to make them more palatable to JS.  However, no matter how much you munge the GL API, it's still a low-level API.  So, with this version, a bunch of helpers went away, such as uniformf, uniformi, uniformMatrix, and vertexAttrib.  They added significant complexity on the native side, and just confused matters for those who are already familiar with the OpenGL family of APIs.  Instead of those helpers, the GL-like uniform[1234][if][v] and similar should be used.  This doesn't prevent a convenience wrapper from being made, but it should be done on the JS side, not hardcoded into the native implementation.  Additionally, some arguments to functions such as vertexAttribPointer were originally omitted; those are back, and follow the GL prototype.  There are, however, still some changes, particularly in getter functions — the full mapping list is available on the API mapping page.
This release of the extension also adds support for software rendering, using the Mesa GL library.  Software rendering shims are included for all 3 platforms, though only for the 32-bit Intel variants (which is why the extension download is bigger than previous versions).  Software rendering should be used automatically if hardware rendering can't be (due to lack of OpenGL or lack of specific extensions), but you can also set the extensions.canvas3d.software_render pref to true in about:config to force it.  Also, if the version of OSMesa included isn't being found, or if you'd like to try a different OSMesa renderer, extensions.canvas3d.osmesalib can be set to the full path of the library to load.  Note that the functions are assumed to be prefixed with "mgl" as opposed to "gl" when loading this library.
I also went ahead and ported most of the native code examples from the OpenGL ES 2.0 Programming Guide.  These are really API examples, and are not intended to demonstrate what can be done with OpenGL support in the browser.  You can view them here:
Chapter 2, Hello Triangle
Chapter 8, Simple Vertex Shader
Chapter 9, Simple 2D Texture
Chapter 9, Simple Cubemap Texture
Chapter 10, Multitexturing
As the examples progress, they build up common functionality and move them into helper js libraries; if those are useful, feel free to use them in your own experiments.  A list of more interesting demos will be coming as soon as I compile one.
Along with this release, I've set up a Canvas 3D group at Google Groups, as the old labs forums are going away shortly.  Please use the forums there for reporting problems (soon to be Bugzilla, but it's not quite set up yet).  I'd like to hear any feedback, or find out about any demos/experiments that may be using Canvas 3D!
Note: I've identified a problem with 0.4.1 that will cause crashes on Windows systems when software rendering is used (either selected or forced).  An updated 0.4.2 with a fix for this problem will be available soon.
Note: 0.4.2 is available at the link above; it fixes the Windows crash and a number of other software rendering problems on other platforms.