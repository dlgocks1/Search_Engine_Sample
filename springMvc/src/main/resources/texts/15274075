ちょっとしたFF廃人の戯言かもかもこれ、むっちゃ面倒でした。ドキュメントなどを読む限りXBOX360やZuneにおいてXNA Frameworkを使ってGamerTag名などが取得できるということは書かれていても、じゃぁ具体的にどうすれば取得できるのか？！　といった簡単なサンプルが見当たらなかったのですよね。 　「Windows API的に考えると適当なAPIから取得すればいいんじゃ？」って思えるわけですが実はそういうわけにはいかないようです。ドキュメント読んでみても、ゲーマータグの取得に関する記述がなかなかなくてねぇ・・・。某所にてＭＳの方へ質問したことがあるのですが「可能である」ということが確認とれましたといった情報は返ってきたのですが「ではどうすれば？」といった突っ込んだところまでは聞けなかったのです。まだまだXNA関連はドキュメントとサンプル関連が少なめですしね。 　とそこでZune/XBOX360共通であろう方法をいろいろ模索していました。そしてWindowsでも同様の方法が可能かどうかもといったところです。プレイしてデータ保存するために、実質的にログイン必須なXBOX360。そして、Zuneを試してみました。WindowsではGamerTagへのログインは必須でなく実行可能なため、この方法ではGamerTagを取得できない状況を考えておかなければならないようです（デバッグ実行でメッセージでましたので）。 　というわけで、ものすご～く回りくどい方法ですが、成功した方法をサンプルとしてのせておきます。 解説： 　この方法は、親のクラスの初期化中にGamerTagを取得するようにしています。ですが、Updateメソッド中にさらにGetGamerTagを呼び出して更新することも可能（場合によってはそのほうが望ましい）です。Windows用コンパイルではnullにしているのは、デバッグで停止したりすることもあるからです。 　取得方法は、ホスト用（サーバー用）ネットワークセッションオブジェクトをシステムリンクで生成し、LocalNetworkGamerからGamerTagを文字列で取得するという感じです。 　もうすこし作りこめば、ホストセッション用のクラスとして実装できてしまう感じですが、ネットワークセッションを生成したうえでないとLocalNetworkGamerのデータを取得できずにnullになってしまうようです。もうすこし別の方法もありそうなのですけど、ここまで作っておくほうがホストプログラム作る上で便利そうだったので記述しておきます。 public static NetSys netsys; void init(){ #if WINDOWS netsys=null; #elif ZUNE netsys = new NetSys(); netsys.Init(this); #elif XBOX netsys = new NetSys(); netsys.Init(this); #endif }using System; using System.Collections.Generic; using System.Linq; using Microsoft.Xna.Framework; using Microsoft.Xna.Framework.Content; using Microsoft.Xna.Framework.GamerServices; using Microsoft.Xna.Framework.Graphics; using Microsoft.Xna.Framework.Net; namespace YoueNameSpace { public class NetSys { Microsoft.Xna.Framework.Game game; public string[] LocalGamerTag; public void Init(Microsoft.Xna.Framework.Game game0) { game = game0; components = game0.Components; LocalGamerTag = new string[8]; CreateNetworkSession(); GetGamerTag(); } public void GetGamerTag() { int i; i = 0; foreach (LocalNetworkGamer gamer in networkSession.LocalGamers) { NetSysHost m = gamer.Tag as NetSysHost; LocalGamerTag[i++] = gamer.ToString(); } } // host const int maxGamers = 8; const int maxLocalGamers = 1; GameComponentCollection components; NetworkSession networkSession; void CreateNetworkSession() { networkSession = NetworkSession.Create(NetworkSessionType.SystemLink, maxLocalGamers, maxGamers); HookNetworkSessionEvents(); } void HookNetworkSessionEvents() { networkSession.GamerJoined += GamerJoinedEventHandler; networkSession.SessionEnded += SessionEndedEventHandler; } void GamerJoinedEventHandler(object sender, GamerJoinedEventArgs e) { e.Gamer.Tag = new NetSysHost(game); components.Add(e.Gamer.Tag as NetSysHost); } void SessionEndedEventHandler(object sender, NetworkSessionEndedEventArgs e) { networkSession.Dispose(); networkSession = null; } } public class NetSysHost : Microsoft.Xna.Framework.DrawableGameComponent { public NetSysHost(Game game) : base(game) { } public override void Initialize() { base.Initialize(); } protected override void LoadContent() { base.LoadContent(); } protected override void UnloadContent() { base.UnloadContent(); } public override void Draw(GameTime gameTime) { base.Draw(gameTime); } }; }