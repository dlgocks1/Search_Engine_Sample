This case study documents the efforts and experiences of an iPhone application developer in porting the iPhone application Amplitude to a phone running Windows Mobile 6.5.
Many iPhone developers are discovering the potential for new markets and significant revenue opportunities within the Windows Mobile environment and are wondering how to port their Apple applications to Windows® phones. 
This case study documents the efforts and experiences of an iPhone application developer in porting the iPhone application Amplitude to a phone running Windows Mobile 6.5. Based on his experience, it offers technical depth, code samples, useful links, observations, and tips to help accelerate porting projects. It is intended for developers who have written applications for the iPhone using the Objective-C language and would like to port their applications to Windows phones. 
All opinions expressed are those of the developer and not necessarily those of Microsoft.
About the Developer
Luke Thompson is a software engineer who recently joined the Gripwire.com development team, led by Justin Arruda, Gripwire.com's lead software development engineer and Luke's former DigiPen classmate. Luke attends the DigiPen Institute of Technology and develops in many languages, including C/C++, C#, Objective-C, and several others. His application resume includes Gripwire’s BottleBlow and Pyramid Brewery for the iPhone, Amplitude for Windows phones, and Lock's Quest and Drawn to Life by THQ & 5TH Cell Media for Nintendo DS.
Gripwire.com
Gripwire.com is a mobile and social application development company located in Seattle, WA. Co-founded by MIT TR35 Innovator and former Amazon.com Mobile and Web Services Senior Manager Robert Frederick, Gripwire’s objective is to meet the gaming, graphics, and mobile access needs of users all over the world. Using the power of social media and friend networks, Gripwire is driving viral adoption and brand engagement, using their core platform to design, develop, and launch mobile solutions. 
With five applications launched in the Apple App Store this year and seven more currently in review, Gripwire has been a strong advocate in developing portable software solutions on multiple platforms and devices. Earlier this year, Microsoft announced the availability of a mobile marketplace that will help make it easy for developers to manage and distribute their applications. Based on the excitement generated by the announcement, Gripwire decided to port one of its most popular applications, Amplitude, to Windows Mobile, thus opening their base to the millions of Windows phone users around the world.
About Amplitude
Amplitude is a fun application that enables users to amplify sound from their surroundings. With real-time graphical representation of sound picked up by the microphone, Amplitude users can adjust the volume/gain on their microphones to amplify sounds, such as animal heartbeats, environmental sounds, distant bird calls, tiny sounds from mechanical devices, and a host of other sounds that might otherwise go unnoticed. 
Device Used 
Gripwire used the HTC Touch Pro as the target mobile device. Development initially started with the HTC Touch Diamond 2, then switched because the HTC Touch Pro provides updated resolution specs to help support the display of audio. It also has increased hardware performance specs for testing code performance, and uses a more recent beta build of Windows Mobile 6.5.
The HTC Touch Pro (also known as the HTC Fuze for AT&T) includes 288 MB RAM and 512 MB ROM; with 480 x 640 pixels and a TFT resistive touch screen. In the current production release it runs Windows Mobile 6.1 Professional on a Qualcomm MSM 7201A 528 MHz processor.
An additional feature is a dongle that can plug into a standard headphone and does not require the use of an external microphone, which provides the headphone functionality that Amplitude requires.
Porting the Code
All code was developed entirely in C# because its managed language has superior memory management and many capabilities.
“What I’m finding is that it’s harder to mess up with C# than in Objective-C, which is used for iPhone application development. This makes any extra effort needed to customize the classes I want worthwhile,” commented Luke Thompson, Gripwire software engineer porting the Amplitude application.
Both Apple and Microsoft provide development environments, but there are important differences between the two. 
Windows Mobile developers can use C/C++ or C# programming languages independently, while iPhone developers use Objective-C to code, even with C/C++ DLLs. 
Windows Mobile developers can work almost exclusively within Visual Studio. Visual Studio provides an environment that makes it very easy to implement callbacks. Conversely, iPhone developers are required to jump between numerous applications to perform the same functions. 
Microsoft Developer Network (MSDN) licenses online libraries for individual use. Rather than reinventing the wheel these libraries help jump start the development effort. 
The Microsoft Windows Development Environment includes:
Development tools built into Visual Studio and .Net Compact Framework. 
Windows Mobile SDK, which includes documentation, sample code, header and library files, emulator images and tools for building applications in Visual Studio.  
A huge developer community. With lots of information, blogs, and sample code available, developers rarely need to reinvent the wheel. 
Although switching from a familiar development platform to a new one comes with challenges and a learning curve, the flexibility of the Microsoft environment means there is almost always a way to accomplish your objective with plenty of places to find help when needed. 
Most of the code found on MSDN works in the Windows environment, but may not be supported in the Windows Mobile environment. Also, Windows Mobile examples are not always as complete as they are with the Windows environment. For instance, the code may provide an answer but may not show specifically how to implement the answer, or may be written for an earlier version of Windows Mobile. Such examples, however, are still helpful nonetheless. 
Because there is so much information available for Windows Mobile application development, iPhone application developers may find themselves asking, “Where do I start?” This case study documents Luke’s porting efforts and is intended to help familiarize you with the Windows Mobile development environment and assist you in setting up your developer machine.
Setup consisted of gaining familiarity with the Windows Mobile development environment, setting up the development system, and bringing over Amplitude’s assets. This required careful study and review of several foundation pages dedicated to developing and distributing Windows Mobile applications
If you are an iPhone developer, some of things you are accustomed to, like drag and drop, interface builder, and adding a PNG file to the project, might not be readily available; however, there are scores of blogs, websites, and code samples that can assist in problem resolution, making it possible.
Review Materials