テン・シー・シーふぅ。
ヲタク/エンジニアiPhoneアプリ開発、その(31)　棒取りゲームプロジェクトを公開Xcode
リクエストもあったし、以前作った棒取りゲーム公開しようと思ったんだけど、さすがにサンプルソース流用してるから、そのままはまずいかも。 　ということで、せっかくだし、一番シンプルWindow-Based Applicationで最初から作る過程を公開。プロジェクトの名前は当然 　stick 　注）本来は自分が作るiPhoneの別のアプリケーションに流用する時とか考えるとView-Basedが正しい選択。今回はいかに手を抜けるかを主題にして、あえて、Window-Based Application。 【やらなければならないこと】 　stickに必要な作業は以下のとおり 　　1）stickプロジェクトの作成 　　2）必要なフレームワークの追加 　　3）自動生成されたstickAppDelegate.mを棒取りゲーム用に変更。 　　4）自動設定されているUIWindowを、棒取りのクリックに反応 　　　　できるようにstick用のstickWindowに拡張。 　　5）stickWindowに時間測定、開始と結果表示機能の追加。 　　6）必要な画像の追加 　で、以前の棒取りゲームでは、5）の開始、結果表示機能にサンプルソースMoveMeのPlacardViewを利用してたんだけど、これが今回利用できないので代替案を考えないといけない。 　なんか、いいのないかな～、お手軽で。とiPhone Dev CenterのSample Code物色してたら、ありましたがな、ええのが～。 　iPhoneで使えるボタンやアラートの簡単な実行ソース。これ、いいです。お勧めサンプルソース。 　この中の 　UIAlertView 　 を使うことに決定。もうね、簡単。タイトル、メッセージとボタンの文字列を書くだけだからね。 で、UIAlertViewはボタンが押されると、お約束のdelegate（「iPhoneアプリ開発、その(6)」参照）をやってくれるので、 - (void)alertView:(UIAlertView *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex をstickWindowに実装すれば、時間測定が開始できるわけです。あとはしばらくしたら定規が落ちるようにし、stickWindowに実装するもう一つの - (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event で時間測定の終了と結果の表示をするわけ。 結果の表示もUIAlertViewを使っちゃえ～。 状態は、以下の図のように遷移することになる。 というわけで... 1）stickプロジェクトの作成 　新規プロジェクトでIphone OS ApplicationのWindows-Based Applicationを選択して名前をstickとする。作成場所はどこでもOK。 2）必要なフレームワークの追加 　当然、「iPhoneアプリ開発、その(14)」の手順のとおり以下のフレームワークを追加する必要がある。 　　QuartzCore.framework 　　CoreGraphics.framework 3）自動生成されたstickAppDelegate.mを棒取りゲーム用に変更。 　stickAppDelegate.mのapplicationDidFinishLaunchingで [window makeKeyAndVisible]; のあとに [window startStickGame]; とする。startStickGameはこの後作るstickWindowのメソッドとして実装。 stickAppDelegate.mの変更はこれでお終い。 4）自動設定されているUIWindowを、棒取りのクリックに反応できるようにstick用のstickWindowに拡張。 　まずは、UIWindowからstickWindowへの拡張だけど、これも「iPhoneアプリ開発、その(14)」で書いたやり方の応用 　出来上がったプロジェクトのMainWindow.xibをダブルクリックでInterface Builder起動。 　表示されたMainWindow.xibウィンドウのWindowアイコンを選択してTools>InspectorメニューでInspectorウィンドウ表示。自動設定されているUIWindowを、棒取りのクリックに反応できるようにstick用のstickWindowに拡張。 　Identityタブを選び、Class IdentityのClassをUIWindowからstickWindowに書き換え（ポップアップメニューには表示されないい。直接書き込む）。 　Enterキーを押してClass変更を確定させる。 　後はFile>Write Class Files...メニューでstickWindow.h/mの書き出し。次に出てくるダイアログはstickプロジェクトに、このソースを追加するかなので、当然stickにチェックをつけてAddだ！ 　ここらへんは、「iPhoneアプリ開発、その(13)」を参照。ここまでできたら、もうInterface Builderには用がないので、MainWindow.xibを保存して終了していい。あとはXcode側でソースを実装。 5）stickWindowに時間測定、開始と結果表示機能の追加。 　できあがったstickWindow.h/mの実装をおこなう。 　stickWindow.h クラス定義を @interface stickWindow : UIWindow に設定し、stickWindowが動作中に利用する変数をリストアップ。 　stickWindow.m 　以下のメソッドを実装。実装の詳細は以前のブログ「iPhoneアプリ開発、その(15)」～「iPhoneアプリ開発、その(22)」あたりを読めばわかるからここでは省略。 - (void)startStickGame - (void)alertView:(UIAlertView *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex - (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event 6）必要な画像の追加 　stickWindow.mで読み込みを指定した画像ファイルを追加する。これも「iPhoneアプリ開発、その(22)」参照。 あとはビルドして実行！ ただし、シミュレータね。実機にインストールしたい人は1万出して制作者承認登録（「iPhoneアプリ開発、その(9)」参照）するか、ジェイルブレークだ。君の反応速度はどれくらいかな？ ちなみに、このソースでシミュレータと実機用ソースの切り分けに使ってる TARGET_IPHONE_SIMULATOR という定数はiPhone Development Guideに載ってます。 ------------ サンプルプロジェクト：stick-game-iphone.zip