28.1 マーカとは? 
マーカとは、バッファと、そのバッファ内での位置を特定するものです。マー
カは、位置を表すものとして、通常の整数による表現と同じように、関数の中で
使用することが出来ます。詳しい説明はSee section 位置。
マーカには、二つの属性があります。一つはそのマーカの位置であり、もう一
つはそのマーカの属するバッファです。位置属性は、バッファ内のマーカの(そ
の瞬間の)位置に等しい整数です。ただし、位置属性の値は、そのマーカが存在
する間に頻繁に変更されることもあります。テキストの挿入や削除が行なわれる
と、マーカは再配置されます。これは、挿入や削除によるテキストの移動にマー
カも追従させるということで、挿入や削除が行なわれる前後でマーカの両側の文
字が常に同じであるようにマーカの位置を変更するということです。再配置によっ
て、マーカの位置属性の値が変更されます。
マーカの周囲のテキストが削除されても、マーカは、削除されたテキストの前
後の文字の間に残ります。また、マーカの存在する位置にテキストが挿入される
と、通常は、挿入されたテキストの直前にマーカが残ります。ただし、
insert-before-markersにより挿入された場合は、マーカの位置は、挿入
されたテキストの直後になります。(see section テキストの挿入)。
テキストの挿入・削除にともなって、バッファ内の全てのマーカがチェックさ
れ、必要ならば再配置が行なわれます。そのため、マーカの数が多いと、挿入や
削除に時間がかかるようになります。ですから、もはや必要なくなったとわかっ
ているマーカは、どこも指さないようにしておくのがよいでしょう。どこからも
参照されていないマーカはいずれガベージ・コレクトされますが、もしそれがど
こかを指していたら、ガベージ・コレクトされるまではチェックや再配置の対象
となり、時間を浪費することになります。
マーカの位置に対して算術演算を施すことはよく行なわれることなので、
+や-を含むたいていの演算子の引数として、マーカそのものを渡
せるようになっています。このような場合、マーカは、その時点で指し示す位置
を表す整数値であるかのように振る舞います。
以下に、マーカの作り方、マーカの設定、マーカ位置へのポイントの移動の例
を示します。
;; とりあえずどこも指していないマーカを作ります。
(setq m1 (make-marker))
⇒ #<marker in no buffer>
;; このバッファの99文字目と100文字目の間にマーカm1を置きます。
(set-marker m1 100)
⇒ #<marker at 100 in markers.texi>
;; このバッファの先頭に一文字挿入してみましょう。
(goto-char (point-min))
⇒ 1
(insert "Q")
⇒ nil
;; 一文字挿入に合わせてm1の内容が変更されます。
m1
⇒ #<marker at 101 in markers.texi>
;; 同じ場所を指す二つのマーカは、
;; equalですが、eqではありません。
(setq m2 (copy-marker m1))
⇒ #<marker at 101 in markers.texi>
(eq m1 m2)
⇒ nil
(equal m1 m2)
⇒ t
;; 必要なくなったら、マーカがどこも指さないようにします。
(set-marker m1 nil)
⇒ #<marker in no buffer>