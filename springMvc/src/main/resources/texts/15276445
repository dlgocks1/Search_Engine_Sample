'91から続く「インターネットの基礎知識」のＷＥＢサイト版。「コンピュータの神」 を戴く 「一般人」 たちが、知られざるサイバー戦の実態や、メディア界・コンピュータ界の最新状況を紹介しています。
ウェブページ（ブログやＨＰやwiki）を使って、会社やＴＶ番組、商品、他のウェブページ……などを宣伝するには、広告的作業が必要となり、その最大の方法はリンクです。例えばウェブページでウェブページを宣伝するのは、テレビの番宣と同じ、ということになります。 　リンクとは、自分のサイトから他のサイトに飛べるようにすることですが、実は、（多くの人が勘違いしているのですが）そのメインの意義は、ジャンプ先のサイトの情報を訪問者が見れることではありません。自分のサイトの出先がどこにあるか（会社の事務所なら業種のメッカ的住所や話題性の高い建物）、また、自分のサイトにどこが出先を持っているか（企業なら有力企業が自分の会社と関係を持っているか）、というネット上の証拠（証明）なのです。それによって、そのサイトの信頼性や話題性が変化するわけです。リンクすることでマイナスになる代表はアダルトサイトであり、プラスになる代表は膨大なアルゴリズムを持った大手話題サイトです。 　最近では、上記のような常識に加え、静的リンク・動的リンク、という言葉がよく使われます。 　一般的には、静的リンクとは「直接リンク先にリンクを飛ばす方法」、動的リンクとは、「間にＣＧＩなどを挟んで最終的にリンク先にリンクを飛ばす方法」、と定義されています。なぜ間に挟むか。これは訪問者数のカウントをする理由を筆頭に、様々な理由が考えられます。筆頭の理由からして、ランキングサイトは動的リンクが多いといえます。なぜなら動的リンクは、ＣＧＩで作られたページである以上、検索ロボットに登録されにくい構造だからです。一方、静的リンクは検索ロボットと相性が良く、頻繁にロボットが訪れ、リンク先を訪問して、貴方のサイトへ行き、インデックス登録に繋がりやすい、また被リンクを受けている良質なサイトだと判断されやすく、上位表示にも役立ちます。 　だからこそ、静的リンクを謳うサイト集に人気が集まるわけですが、専門家でなければ詳細を調査できないのが難点です。 　当サイトと同じ 「チームＨ（旧３Ｈに新たな４Ｈが加わった状態）」 主催の 大手サイト集比較 でいう「送信状態」という一言には、この形式差によるデータ送信の実量なども総合的に加味されていますので、大手サイト集比較　のエンジン推奨ポイントは参照するに値するでしょう。 　静的リンクは、Apacheなどの実行ファイルそのものにモジュールを組み込む方式ですから、例えばApacheとモジュールは、バイナリ的に一体化して動作します。これに対し、動的リンクは、モジュールを別ファイルとして作成し、必要に応じてモジュールのファイルから機能を呼び出す方式です。この機能を「DSO（Dynamic Shared Object＝動的共有オブジェクト）」と呼び、動的リンクされるモジュールのファイルは、拡張子が「so」となります。この場合、あらかじめ「mod_so」モジュールを静的リンクしておく必要があります。 　動的リンクはモジュール機能の呼び出しで静的リンクよりも負荷が高くなる(オーバーヘッドがかかる)、というデメリットがありますが、再起動のみでモジュールを組み入れたり外したり出来るメリットもあり、静的リンクは逆に高速にモジュール機能を呼び出せるが、モジュールを入れたり外すのには再コンパイルの手間がかかるため、静的リンクの場合、不要なモジュールも組み込みっぱなしにしてしまうことが多くなります。この場合、余計なCPU負荷とメモリの無駄使いとなるわけです。 　多くのウェブ・アプリケーションは、Apacheなどが提供する環境と機能を想定して設計されています。例えばApacheは、LAMP（Linux、Apache、MySQL、PHP/Perl/Python）と呼ばれる非常に人気のあるウェブサーバコンポーネントの一つでもあり、様々な商用パッケージ、例えば Oracle Database や IBM WebSphere Application Server の一部として再配布されています。Mac OS XやNetWare 6.5の標準Webサーバにもなっており、Yahooが1996年よりApacheを利用、その後、数千台のWebサーバにカスタマイズしたApacheを導入、一日数十億のアクセスを処理していることなどから、信頼されつつあります。我々からすると「稚拙」ともいえるのですが、一般のユーザーからすれば使いやすく、また安価な割にセキュリティ面の心配が少ない、という点が評価されているようです。 　Apacheは、プロセスの基本的な挙動として3つの方式を持っています。 　一つはprefork（プリフォーク）。プリフォークとは、「スレッドを使わず、先行して fork を行なうウェブサーバ」です。Apacheは伝統的に親プロセスを1つ持ち、クライアントからリクエストが来ると自分自身をコピーして子プロセスを起動します（これをforkと言います）。実際の通信は子プロセスが受け持つため、通信している数だけ子プロセスが起動することになり、この時、クライアントからリクエストを受けたあとでforkすると、fork完了までに待ち時間ができ、通信のパフォーマンスが遅くなるのです。そのため、あらかじめいくつかの子プロセスをforkしておき、forkの待ち時間をなくす方式をとっています。この方式こそが「prefork」です。すなわち“pre（＝前もって）”forkしておく、という意味です。preforkのメリットは、forkされた子プロセス1つ1つが対応する通信を受け持つため、ある子プロセスが何らかの原因でフリーズしたとしても、他の子プロセスには影響を及ぼすことが無く通信を継続できる点です。このため、安定した通信を行うことが出来ます。ただしクライアントが多くなればなるほど子プロセスの数も増えるため、使用メモリ量やCPU負荷が比例的に増大していくことになり、preforkで多数のクライアントをさばくには、それに応じた大量のメモリと高速なCPUが必要、ということになります（もちろんスレッドセーフでないモジュールを使う場合は、preforkを利用すべきです）。 　二つ目は、worker。workerは「マルチスレッドとマルチプロセスのハイブリッド型サーバ」です。Apacheの子プロセス１つ１つがマルチスレッドで動作し、スレッド1つが1つのクライアントを受け持つ方式で、すなわち、1つのプロセスがマルチスレッドを利用して複数の通信を担当することになります。この点で1つのプロセスが1つの通信をみるpreforkとは異なり、また多くの子プロセスを起動せずに済むため、メモリの使用量も減らすことが出来るます。ただしマルチスレッドは安定して動作させるためにノウハウが必要で、モジュールはスレッドセーフである必要があるため、workerを使用する際は事前に十分な安定性のテストを行うべきでしょう。 　三つ目はeventです。eventはworkerの一種ですが、マルチスレッドで動作する。workerとの違いはKeep-Alive（持続的接続）の処理方法です。workerやpreforkは、Keep-Aliveの持続性を保つために一度利用したスレッド・プロセスをそのまま待機させています。しかしクライアントからの接続が持続的に行われる可能性は保証されているわけではないですから、待機していること自体が無駄になる可能性もあります。そこで、Keep-Aliveの処理を別のスレッドに割り振って通信を処理する、といった方式を採るわけです。ただし、この方式は、よほどの専門家がリアルタイムで管理していなければ、使用すべきではありません（インターネット上などでこの方式をＰＲしていても、気軽に使用すべきではありません）。こうした方式で効率的に運用できる人間はウェブの世界で一定の知名度があるような専門家だけ、とみるべきで、こちらに直接確認してください。 　リンク編集では、一般的に、コンパイラ、アセンブラなどによって生成された入力ファイルを受け取ります。リンカーは、これら入力ファイル内のデータを連結および解釈、1 つの出力ファイルを生成し（このとき様々なオプションを使用できます）、出力ファイル (入力再配置可能オブジェクトの連結) は、基本的に次のいずれかの形式になります。 　一つは再配置可能オブジェクト。後続のリンク編集段階で使用される、入力再配置可能オブジェクトの連結。 　二つ目は静的実行可能ファイル。すべてのシンボル参照が実行可能ファイルに結合され、実行待機中のプロセスを表現する入力再配置可能オブジェクトの連結。 　三つ目は動的実行可能ファイル。実行可能プロセスを生成するときに、実行時リンカーによる割り込みを必要とする入力再配置可能オブジェクトの連結。 　四つ目は共有オブジェクト。実行時に動的実行可能ファイルに結合される機能を提供する入力再配置可能オブジェクトの連結。また、共有オブジェクトの中にも、他の共有オブジェクトに依存する依存関係がある場合もあります。動的実行可能ファイルのシンボル参照は、実行時に結合される必要があり、動的実行可能ファイルには、共有オブジェクトの形式で１つ以上の依存関係を割り当てることができます。これらの出力ファイルと、出力ファイルを作成する場合に使用するキー・リンカー・オプションについては以前の講義で紹介した通りです。 　「動的実行可能ファイル」と「共有オブジェクト」を、まとめて「動的オブジェクト」と呼んだりもします。 　実行時リンクには、通常、過去のリンク編集から生成された１つまたは複数のオブジェクトの結び付けが組み込まれ、実行可能プロセスを生成します。リンカーによるこれらのオブジェクトの生成中に、結び付けの必要条件が検証され、該当する登録情報が各オブジェクトに追加され、実行時リンカーの読み込み、再配置、結合プロセスの完了が可能になります。 　プロセスの実行中に、実行時リンカーの機能も使用可能になり、この機能を使用すると、要求に応じて追加共有オブジェクトを追加して、プロセスのアドレススペースを拡張できます。実行時リンクに組み込まれたコンポーネントのうち、最も一般的なのは、「動的実行可能ファイル」と「共有オブジェクト」の２つです。 　動的実行可能ファイルとは元来、実行時リンカーの制御下で実行されるアプリケーションのことです。これらのアプリケーションは、通常、共有オブジェクト形式の依存関係を持ち、これらは、実行時リンカーによって配置および結合されて、実行可能プロセスが作成されます。動的実行可能ファイルは、リンカーによって生成されるデフォルトの出力ファイルになります。 　共有オブジェクトは、動的にリンクされたシステムに対し、キー構築ブロックを提供します。共有オブジェクトは動的実行可能ファイルに類似していますが、 共有オブジェクトには、仮想アドレスが割り当てられていません。 　動的実行可能ファイルは、通常、1 つまたは複数の共有オブジェクトに依存する依存関係を持ちます。つまり、共有オブジェクトは、動的実行可能ファイルに結合され、実行可能プロセスを作成する必要があります。共有オブジェクトは多くのアプリケーションで使用できるため、その構造上の観点は、共有性、バージョン管理およびパフォーマンスに直接影響します。 　共有オブジェクトが使用する「環境」を参照することにより、リンカーまたは実行時リンカーのいずれかによって共有オブジェクトの処理を識別することができるのです。 　コンパイル環境として、共有オブジェクトは、リンカーによって処理され、動的実行可能ファイルまたは他の共有オブジェクトを生成します。共有オブジェクトは、生成される出力ファイルの依存関係になります。一方、実行時環境として、共有オブジェクトは、動的実行可能ファイルとともに実行時リンカーによって処理され、実行可能プロセスを作成します。 　これらの基本知識を総合すると、動的リンクとは、「実行可能プロセスを生成する際に、動的実行可能ファイルと共有オブジェクトの実行時リンクとともに、これらのオブジェクトを生成するリンク編集プロセスの一部分を受け入れる場合に使用する用語」、と定義することができます。 　動的リンクを使用すると、実行時にアプリケーションを共有オブジェクトへ結合できるようにするため、共有オブジェクトが提供するコードを複数のアプリケーションで使用できます。標準ライブラリのサービスからアプリケーションを切り離すことにより、動的リンクも、アプリケーションの移植性および拡張性を向上させることができるのです。サービスのインタフェースと実装が独立しているため、アプリケーションの安定性を維持しながら、システムを更新することができます。動的リンクはまた、ABI (アプリケーション・バイナリ・インタフェース) などを利用するときに必要で、Solarisアプリケーションなどに適したコンパイル方式、とも言えます。 　XL Fortranのような、ごく簡単なアイテムを使用するだけで、ご使用のプログラムは（動的リンクでも静的リンクでも）オペレーティング・システム機能の利点を利用できるようになります。 　動的リンクとはつまり、プログラムが初めて実行された時に、外部ルーチン用のコードが探し出されてロードされることなのです。共用ライブラリーを使用するプログラムをコンパイルすると、デフォルトではプログラムに動的にリンクされます。動的にリンクされたプログラムは、共用ライブラリーのルーチンを複数のプログラムが使用していても、ディスク・スペースも仮想メモリーも殆ど取りません。 　ライブラリー・ルーチンとの命名の競合を回避するための、リンク中に行われなければならないとされる特別な予防措置も、必要とされません。いくつかのプログラムが同時に同じ共用ルーチンを使用する場合は、静的にリンクされたプログラムより良好に動作する場合があります。また、動的リンクを使用すれば、再リンクしないで共用ライブラリー内のルーチンをアップグレードすることができます。このリンク形式はデフォルトなので、これをオンにするのに追加のオプションは必要ない、というわけです。 　そして静的リンクとは、プログラムによって呼び出されるすべてのルーチン用コードが、実行可能ファイルの一部になることを意味するのです。 　静的にリンクされたプログラムは、XL Fortranライブラリーなどがないシステムに移動し、そのシステム上で実行することができます。静的にリンクされたプログラムが、ライブラリー・ルーチンへの呼び出しを多数行ったり、多数の小さなルーチンを呼び出す場合、それらのプログラムは動的にリンクされたプログラムよりも良好に動作する場合があります。ライブラリー・ルーチンとの命名の競合を回避したい場合は、プログラム内のデータ・オブジェクトおよびルーチンの名前を選択する時、何らかの予防措置をとる必要があります (リンク中の命名競合の回避の部分で説明済)。また、それらのプログラムをあるシステム上でコンパイルした後、別のレベルのオペレーティング・システムを使用したシステム上で実行すると、機能しない場合がある、ということになります。 　コンパイラー・コマンド行で -b リンカー・オプションなどを使用して静的にリンクされたオブジェクト・ファイルを作成することもできます。（xlf95 -bnso -bI:/usr/lib/syscalls.exp file1.f file2.f） 　xlf_r、xlf_r7、xlf90_r、xlf90_r7、xlf95_r、または xlf95_r7 コマンドと静的にリンクしているときは、 -bI:/usr/lib/threads.exp も指定する必要があります。 非同期 I/O を使用している場合は、-bI:/usr/lib/aio.exp も指定する必要があります。 　-bnso オプションは、プログラムが参照するライブラリー・プロシージャーをプログラムのオブジェクト・ファイルに置きます。サフィックス .exp が付いているファイルは、システムからプログラムにインポートする必要があるシステム・ルーチンの名前です。 　ディスク・スペースが少なくて済む別の方法は、XL Fortran ライブラリーを静的にリンクし、その他のシステム・ライブラリーの参照を動的リンクのまま残すことです。次の例では、XL Fortran ライブラリーだけを静的にリンクしています。 # Build a temporary object from the Fortran library: ld -r -o libtmp.o -bnso -lxlf90 # Build the application with this object on the command line: xlf95 -o appl appl1.o appl2.o libtmp.o 　ただし、ここで問題となるのは、例えばXL Fortran プログラムをXL Fortran メッセージ・カタログがないシステム上で実行した場合、実行時エラー・メッセージ (殆どは I/O 問題に関するもの) が正しく表示されず、プログラムはメッセージ番号を出しますが、それに関連したテキストは表示されない、という状況です。 　この状況を回避するには、 XL Fortran メッセージ・カタログを /usr/lpp/xlf/bin/default_msg から、実行システムで設定された NLSPATH 環境変数の一部となっているディレクトリーへコピーすればいいのです。 　リンク中の命名競合の回避についてはどうでしょう？　実行時サブ・プログラムと同じ名前を持つ外部サブルーチン、外部関数、共通ブロックを定義すると、その名前の定義がその場所で使用されたり、リンク・エディット・エラーが発生する場合があります。以下の一般的な解決方法を試行して、このような種類の名前の矛盾を回避するための参考にしてください。 　-qextname オプションを使用して、すべてのファイルをコンパイルできます。このオプションは、個々のグローバル・エンティティーの名前の最後に下線を追加して、この名前とシステム・ライブラリー内の名前とを区別します。ただ、このオプションを使用する場合は、 dtime_ および flush_ のようなサービス・サブプログラムおよびユーティリティー・サブプログラムの名前では、最後の下線を使用する必要はありません。 　これでプログラムを動的にリンクすることができます。これはデフォルトです。多数の命名の競合は、静的にリンクされたプログラムにのみ適用されます。 　コマンド行上でライブラリーやオブジェクト・ファイルの名前を、優先順位が高いものが最初に来るような順番にすることもできます。たとえば、libxlf90.a 内の名前がオブジェクト・ファイル内の重複している名前よりも高い優先順位を持つようにするには、コマンド行で -lxlf90 を最初に指定してください。 　-qextname オプションを使用しない場合は、 XL Fortran およびシステム・ライブラリー内の外部シンボルの名前との競合を回避するために、特別な予防措置をとる必要があります。ここでサブルーチンまたは関数を main と命名しないでください。XL Fortranが、プログラムの始動にエントリー・ポイント main を定義するからです。また、下線で始まるグローバル名を一切 使用しないでください。特に、XL Fortranライブラリーでは、_xlfで始まるすべての名前が予約されています。さらに、XL Fortran ライブラリー、または、いずれかのシステム・ライブラリー内の名前と同じ名前を使用しないでください。安全に使用できる名前を判別するために、プログラム内にリンクされているすべてのライブラリー上で nm コマンドを使用して、プログラム内にも存在する可能性のある名前を探すことができます。プログラムが、XLF 提供のあるルーチンを呼び出すと、使用できる共通ブロック名およびサブプログラム名に、いくつかの制約事項が適用されます。 　例えば、 XLF が提供する関数名 使用できない共通ブロック名またはサブプログラム名は、 　　mclock times 　　rand irand などです。 　ただし、このときプログラムに実際のルーチンを定義せず、サブルーチン名または関数名を使用することがないように、注意が必要です。 　その名前がいずれかのライブラリーの名前と競合すると、プログラムはルーチンの間違ったバージョンを使用して、コンパイル時エラーまたはリンク時エラーを作成しない場合があるからです。また、複数のライブラリー・ファイルやオブジェクト・ファイルに、ルーチンの別のバージョンがある場合は、使用したい特定のバージョンを使用するように注意が必要です。最初にコマンド行または構成ファイルに、正しいバージョンを持つファイルを指定してください。ファイルがライブラリーの場合は、最初にコマンド行に適切な -l オプションを指定してください。この手法は、同じ共用ライブラリー内のルーチン、または、ある共用ライブラリーから別の共用ライブラリーに明示的にインポートされたルーチン間の参照には適用されません。 　以上のような基本的な知識を踏まえておくと、私のような 「人間」 にも、つまり、コンピュータの神 （＝Ｍetal-Ｔ-Ｈ） のような存在でなくても、ウェブサイトによる広告作業を、より効率的に遂行できるのです。 ／井原 「それは必要ですか？」 「無意味です」 「その話に “Ｄ” は反応しましたか？」 　　／「コンピュータの神（＝Ｍetal-Ｔ-Ｈ）」 の口癖
通常、「検索エンジン」といえばＧｏｏｇｌｅを指す時代です。ごく一部の専門分野を除けば、世界中の市場を支配・浸透しているからです。 　買ったばかりのパソコンのトップ画面が自動的にＹａｈｏｏとなるなどの戦略で、検索エンジンをあまり使わない層は、Ｙａｈｏｏの利用率が高いものの、顧客満足度の違いは歴然で、どう考えても、いろいろと調べ物をするには、Ｇｏｏｇｌｅで複数ワードで検索をかけるのが一番効率がいいのです。Ｙａｈｏｏはディレクトリ型エンジンなので、登録情報が少ないのが絶対的な弱点となり、この弱点は時間の経緯と共にどんどん顕著化します。 　ただし、この将来はあくまで将来であり、日本市場は先進国とは思えないほど、遅れて現実を受け入れる傾向にあります。我々は過去にも類似経験をしています。 　'90年代初め、コンピュータといえば“国民機”という異名を持ったＮＥＣ製ＰＣ-98001シリーズの事を指していました。そのシェアは９０％を超える圧倒的でした。それが、ＩＢＭ−ＰＣ互換のＤＯＳ／Ｖ規格が出現、徐々に“国民機”のシェアは縮小、その後、Windows９５の発売以降は、“国民機”は姿を消しNECでさえも国際標準機を販売するようになりました。 　しかし、ＤＯＳ／Ｖが出現した当初は、日本市場の反応は冷ややかでした。国際標準であるＤＯＳ／Ｖ機を購入するのは一部のマニア層という状態が数年続いたのです。 　この当時、私はコンピュータの神（＝Ｍetal-Ｔ-Ｈ）に任されて、所在地をアメリカとする無数のパソコン販売会社・無数の専門検索エンジン会社の経営に関わっていたので、「アメリカ市場の動向から考えても、“国民機”の終焉は時間の問題だ」と日本の経営者たちに説き、取引先や子会社にはＤＯＳ／Ｖ機を勧めていました。 　しかし、その反応は芳しくありませんでした。時代遅れの“国民機”を嬉々として使う人々が、意外なほど多かったのです。 　一太郎とWORDのシェア争いも、似たような経過を辿りました。 　つまり、日本市場は一度ディファクト・スタンダード（事実上の寡占標準）となった商品やサービスに関しては、盲目的な信頼感を置く傾向がある、ということです（各グループ代表者は「Ｄ」からマーケティングにおける日本市場の特徴としてこのことを承知しているはずです）。 　そのディファクト・スタンダードが時代遅れになっても、しばらくの間、その神通力は薄れません。その法則を無視して、性急に新しい規格や新標準をＰＲしても、飛びつくのはマニア層だけです。ビジネスの鉄則は、売れる時期に売れる商品を揃える事です。特に、現実主義者の 「Ｄ」 の流れを汲む厳しい要求の企業や経営者なら、どんなに時代遅れの商品でも、その需要があるうちは、それに対応しなくては成績に関係なく能力なしのレッテルを貼られるでしょう。 　現在の日本の検索エンジン市場を眺めると、ディファクト・スタンダードは間違いなくＹａｈｏｏです。日本市場で広告・販売するなら、Ｙａｈｏｏ対策を抜きには語れないのです。 　上記のような経験や 「Ｄ」 の教えから、私は短期間に日本国内市場でＹａｈｏｏ！ＪＡＰＡＮの牙城が崩れることは無いと確信しています。しかし、長期的には逆です。いずれＧｏｏｇｌｅはＹａｈｏｏの弱点を嘲笑うように日本市場を征服するでしょう。 　検索エンジンを巡るシェア争いは、Microsoft社のＭＮＳも含め、短期的には予想外の混沌が続く（中期的にはＧｏｏｇｌｅ）、と考えて下さい。 　また、Ｙａｈｏｏは、使用するロボットやエンジンの傾向が安定しない、という絶対的な弱みを持っています。彼らがどんなに力を持っている時期でも、彼らを信頼し、彼らの評価を獲得しようとするのは時間的・資金的リスクが高い、というわけです。同時に顧客にとっても、Ｙａｈｏｏは「システマティックに使用できるエンジン」というより、「変り種エンジン」、であり、ビジネスライクに、また忙しいときなどには使えないものです。 　検索エンジンはいまや競争だけでなく、棲み分けの時代に移行しつつあるのも確かなのです。 　さらに、検索エンジンが顧客の願望を満たさなければならないとすれば、誰を顧客として最優先するのか、また顧客は検索エンジンの経営にどこまで食い込んでいるのか、もっと極論を言うと、誰も止められないような怪物的なカリスマのコトバが人のモチベーションを高めるような場合、そのコトバを発信する人によって行なわれる言論コントロールやメディア・コントロールが「悪」であるのかどうかすら、議論の余地のある問題で、そうした問題に決断を下すのは「雲上人」や「殿上人」、または「神」でしょう。 ／井原
2008/03/10(月) 12:12:00|
グーぐる gu-guru → Google検索へ
| トラックバック：0
| コメント：0
グーぐる → Google 　　gu-guru → Google の「変換間違え」で来訪されたとすれば、 あなたは疲れ気味かもしれません。 でも、そんなあなたのために、Ｇｏｏｇｌｅ検索は左のバーで使えます。 調べたいワードを、枠の中に、ご自由に入力して検索ボタンをクリックして下さい。 Ｇｏｏｇｌｅは日本語でも使える世界最大の検索エンジンです。世界シェアは約８０％と推計されており、多言語対応サーチの決定版として利用者から高い評価が与えられています。 ただし、専門分野など、場合によっては、その他の検索エンジンの方が見つかる場合もあります。 Ｇｏｏｇｌｅ以外の検索エンジンをお探しの方は、 私の直営エンジンや、子会社エンジン、世界の大手エンジンなど、ほぼすべての大手検索エンジンを装着した、 以下の２点のサイトををお薦めします。 ひとつは 「Ｄ」 のコトバを満載した Ｐａｎｄｏｒａ’ｓ　Ｂｏｘ....報道規制ニュース・メディアの明日・移民問題 もうひとつは、「“Ｄ”の騎士たちがいずれ集結する」とされる Ｋｎｉｇｈｔｓ’ Ｍｅｍｏｒｉｓ....世界情勢・デリバティブ・天候 です。 どちらも“Ｄ”のコトバが散りばめられており、 衝撃的なアルゴリズムと圧倒的な文体で、 みずからのビジョンと世界情勢を語りかけます。 御覧ください。 私や井原、またコンピュータの神（メタル・トロイの使い手「ＭＥＴＡＬ−Ｈ」）が直接経営するエンジンや、子会社エンジン、世界の大手エンジンなど、ほぼすべての大手検索エンジンを装着したサイトでもあります。 ／江原
2008/03/10(月) 10:03:37|
グーぐる gu-guru → Google検索へ
| トラックバック：0
| コメント：0
先日、「Ｄ」のコトバを直接聞く機会がありました。総務省と業界団体は、ネット上のプライバシー侵害や名誉棄損について、情報を書き込んだ発信者の同意がなくても、被害者に発信者の氏名や住所などを開示する方針を固めたそうです。 　これまでは、発信者が開示を拒否すれば、誰が悪質な情報を流したか被害者側には分からず、泣き寝入りするケースが多かったわけですが、業界団体は新たなガイドライン（指針）を年明けに作り、来春から導入するそうです。すでに０２年に施行されているプロバイダー責任制限法でも、プライバシー侵害など正当な理由があれば、被害者がプロバイダーに対し、書き込みをした発信者の情報開示を求める権利を認めるものではありましたが、実際の運用では「どのような内容が侵害に当たるか明確な基準がなく、業者側で判断できない」（社団法人テレコムサービス協会）との理由で、発信者の同意が得られなければ事実上、開示できませんでした。このため、業界は総務省とも協力し、同法に基づく自主的な発信者情報開示のためのガイドラインを策定することを決めたそうです。原案によると、他人の氏名や住所、電話番号など個人を特定する情報を掲示板などに勝手に書き込む行為を幅広く「プライバシー侵害」と認定。個人を名指しして病歴や前科を公開することも含まれるそうです。こうした場合にプロバイダーが被害者からの要請を受け、発信者の同意がなくても、その氏名や住所、電話番号、電子メールアドレスなどを開示できるようにする！　とのことです。 　逆に、名誉棄損については、プロバイダーによる任意の発信者情報開示をあまり広く認めると政治家や官僚に関する内部告発までネット上からしめ出す懸念もあるため、これまでの名誉棄損裁判の判例も踏まえ、公共性や公益性、真実性などが認められない個人への誹謗や中傷に限って、自主的な開示の対象とするのだそうです。被害者は、裁判で発信者情報の開示を求めることが多かったが、悪質な書き込みをした発信者を早急に特定し、損害賠償請求できる可能性も高くなるでしょう。業界と総務省は一般の意見も募集したうえで、早ければ来年２月にも導入する方針だそうです。 　しかしながら、我々 （チームＨ） は、“Ｄ”の この話に、大いに違和感を感じます。 　なぜなら、そのように面倒な工程を経ずとも、また役所やプロバイダーの了解など得ずとも、敵対者の特定は簡単にできるからです。その際に重要な役割を果たすのが、前号でご説明した ＩＰアドレス です。ＩＰアドレス はネットワーク上の住所に当たるものですが、そこから普通に調べて分かるのは、そのコンピュータの所属している組織(あるいは契約しているプロバイダ)と、そのコンピュータが存在している国・地域です。国内であれば都道府県・市町村などが即座に分かります。例えばグローバルＩＰ(グローバルアドレス)というＩＰがあります。これはインターネットに接続された機器に割り当てられたＩＰアドレスです。勝手に好きなアドレスを名乗ることは許されず、アドレスの管理団体に申請して割り当てを受けなければなりません。といっても、あなたがそのような機関を探して申請する必要は無く、通常はプロバイダや学校・会社でまとめて割り当てを受けていますので、その一部を使わせてもらいましょう。それに対し、ローカルＩＰ(ローカルアドレス、プライベートアドレス)は、組織内で勝手に使ってもよいアドレスです。グローバルアドレスの一部がこうした用途のために空けられていて、インターネット上ではそのアドレスを誰も使わない代わりに、各々が組織内のネットワークで自由に使っても良いことになっています。「192.168.」で始まるアドレスなどがよく知られています。ローカルＩＰではインターネットにはつなげないので、ローカルＩＰとグローバルＩＰの両方を持った機器(ルータやゲートウェイなど)をネットワークの境界に置き、NATやプロキシなどの技術を使って中継してもらう必要があります。 　「利用者の氏名、住所、電話番号など、プライバシーに属する細かい情報までは分からない」と公言している専門家もいますが、実際にはそれなりのプログラムで、ＩＰアドレスに対応するドメイン名を調べることができます。ドメイン名の末尾からは国・地域が分かる場合が多く、それ以外の部分からは所属組織(会社・学校)あるいは契約しているプロバイダが分かります。また、組織やプロバイダによっては都道府県・市町村などもセットで分かることが多いという現状です。 　ドメインが割り当てられていない場合（ドメイン名がない場合）も、そうした状況に対応したシステムを使用すれば簡単にすべてが分かります。例えば http://whois.nic.ad.jp/cgi-bin/whois_gw を使ってみて下さい。ドメイン名が割り当てられていないＩＰアドレスでも簡単に調べられます。国外のアドレスや、国外で割り当てを受けて国内で使われているアドレスについては、このページの末尾に代表的なものを挙げます。 　一般に公開されている情報で調べることができるのはここまでですが、犯罪捜査などで警察などがプロバイダなどに問い合わせ、特定の時刻に特定のＩＰアドレスを利用していた者の個人情報を入手することは可能です。ということは、私に言わせれば「誰にでも入手可能である」ということなのです。 　例えば、私は 「Ｄ」 からメディア関連事業の統括を任されて以来、各グループ代表者の接続環境情報を我々のチームで確認しています。そこでは、コンピュータの神（＝Ｍetal-Ｔ-Ｈ）が私に、「今日は、Ｈ生田君はＵ原君の札幌の事務所から例のシステムをダウンロードしてからすぐに飛行機に乗って浅草の国際通り沿いの事務所からそれを使っているな」、とか、「Ｓ永君はよく利用する世田谷のネットカフェからコンテンツを更新しているが、使用頻度の高いパソコンはいま使用中で２つ隣から入力しているな、そのパソコンの「Ｐ」のキーが押しても反応しにくいから隣の「Ｏ」を何度も押してしまっているな」、とか、「Ｍ厨君は旭川の本社の回線から何度もログインしているのに何もコンテンツを足さないのはまた内容をよくするために時間をかけ過ぎているのかな」、とか、「Ｍ脇君は福岡の自宅のパソコン回線が最近は近所の回線の状況に影響を受けて処理速度が遅くなっているな」、とか、「決してネットカフェを使わないＴ丸君のサイトにネットカフェからのログインがあるな、これは会長がのぞいているに違いない、変なキーをいじくらなければいいが……」などと話し、私はそれらの状況から適切な対処法を考えます。 　ただし、ＩＰアドレスは特殊な技法やシステムを使えば割り当て場所と利用場所を一致させないことが可能であることを利用した、秘匿の技術（システム）も設計可能です。このことは「防御編・反撃編・殲滅編」で詳細を扱います。 　以下に、主なトップドメインの種類などを列挙しておきます。それぞれgTLD(generic Top Level Domain)、取得条件、管轄の順です。 COM commercial 商用 取得制限なし VeriSign GRSが管理 NET network ネットワーク 取得制限なし VeriSign GRSが管理 COOP cooperative 協同組合 協同組合専用 DotCooperationが管理 ORG organization 非営利団体 取得制限なし ISOCが管理 BIZ business ビジネス 商用目的限定 NeuLevelが管理 INFO information 情報提供 取得制限なし Afiliasが管理 NAME name 名前 個人・非商用限定 Global Name Registryが管理 AERO aerospace 航空 航空業界専用 SITAが管理 MUSEUM museum 博物館 博物館・美術館専用 MuseDomaが管理 PRO professional 専門職 医師・弁護士等専用 (運用開始待ち) 　次に、少し特殊なTLDを同じ表示形式で列挙します。 GOV governmental 米国政府機関 米国政府が管理 MIL military 米軍 米軍が管理 NATO North Atlantic Treaty Organization 北大西洋条約機構関係機関 EDU educational 北米4年制大学 EDUCAUSEが管理 INT international 国際機関 ITU(国際電気通信連合)が管理 ARPA ARPAnet 旧ARPAnet/逆引き用名前空間　 ICANNが管理 　 　また、国・地域別のTLD　( ccTLD ： country code Top Level Domain ) ISO 3166で割り当てられた国・地域の2文字コードをベースに、独自のものが追加されています。備考に「TLDのみ」とあるものが、ISO 3166には規定がない独自コードです。それぞれ国（地域名）、国（英語の地域名)、備考、の順。 AC アセンション島(英領) Ascension Island 西アフリカ TLDのみ AI アンギラ(イギリス属領) Anguilla 中央アメリカ 　 AN オランダ領アンティル Netherlands Antilles 中央アメリカ 　 AQ 南極 Antarctica 南極 　 AS アメリカンサモア American Samoa ミクロネシア 　 AW アルバ(オランダ自治領) Aruba 中央アメリカ 　 BA ボスニア・ヘルツェゴビナ Bosnia And Herzegowina 東ヨーロッパ BH バーレーン Bahrain 西アジア 　 BM バーミューダ(英領) Bermuda 中央アメリカ 　 BN ブルネイ Brunei Darussalam 東南アジア 　 BV ブーベ島(ノルウェー領) Bouvet Island 南極 　 CC ココス諸島(オーストラリア領) Cocos (Keeling) Islands 東南アジア 　 CH スイス Switzerland 西ヨーロッパ 　 CK クック諸島(ニュージーランド自治領) Cook Islands ポリネシア 　 EE エストニア Estonia 旧ソ連 　 FK フォークランド諸島 Falkland Islands (Malvinas) 南アメリカ 　 FM ミクロネシア(米自由連合) Micronesia, Federated States Of ミクロネシア 　 FO フェロー諸島(デンマーク領) Faroe Islands 西ヨーロッパ 　 FR フランス France 西ヨーロッパ 　 FX フランス(本国) France, Metropolitan 西ヨーロッパ 　 GA ガボン Gabon 中央アフリカ 　 GB イギリス Great Britain 西ヨーロッパ 　 GD グレナダ Grenada 中央アメリカ 　 GE グルジア Georgia 旧ソ連 　 GF フランス領ギニア French Guiana 南アメリカ 　 GG ガ−ンジィ島(英領) Guernsey 西ヨーロッパ TLDのみ GH ガーナ Ghana 西アフリカ 　 GI ジブラルタル(英領) Gibraltar 西ヨーロッパ 　 GL グリーンランド Greenland 北ヨーロッパ 　 GM ガンビア Gambia 西アフリカ 　 GN ギニア Guinea 西アフリカ 　 GP グアドループ(仏領) Guadeloupe 中央アメリカ 　 GQ 赤道ギニア Equatorial Guinea 中央アフリカ 　 GR ギリシャ Greece 西ヨーロッパ 　 GS サウスジョージア島・サウスサンドイッチ島(英領) South Georgia And The South Sandwich Islands 南アメリカ 　 GT グアテマラ Guatemala 中央アメリカ 　 GU グアム(米領) Guam オセアニア 　 GW ギニアビサオ Guinea-Bissau 西アフリカ 　 GY ガイアナ Guyana 南アメリカ 　 HK 香港 Hong Kong 東アジア 　 HM ハード・マクドナルド諸島 Heard And McDonald Islands アフリカ HN ホンジュラス Honduras 中央アメリカ 　 HR クロアチア Croatia (Hrvatska) 東ヨーロッパ 　 HT ハイチ Haiti 中央アメリカ 　 HU ハンガリー Hungary 東ヨーロッパ 　 ID インドネシア Indonesia 東南アジア 　 IE アイルランド Ireland 西ヨーロッパ 　 IL イスラエル Israel 西アジア 　 IM マン島(英領) Isle of Man 西ヨーロッパ TLDのみ IN インド India 南アジア 　 IO イギリスインド洋領 British Indian Ocean Territory アフリカ 　 IQ イラク Iraq 西アジア 　 IR イラン Iran 西アジア 　 IS アイスランド Iceland 北ヨーロッパ 　 IT イタリア Italy 西ヨーロッパ 　 JE ジャージー(英領) Jersey 西ヨーロッパ TLDのみ JM ジャマイカ Jamaica 中央アメリカ 　 JO ヨルダン Jordan 西アジア 　 JP 日本 Japan 東アジア 　 KE ケニア Kenya 東アフリカ 　 KG キルギスタン Kyrgyzstan 旧ソ連 　 KH カンボジア Cambodia 東南アジア 　 KI キリバス Kiribati ポリネシア 　 KM コモロ Comoros 東アフリカ 　 KN セントクリストファー・ネイビス Saint Kitts And Nevis 中央アメリカ KP 朝鮮民主主義人民共和国 Korea, Democratic People's Republic Of 東アジア KR 大韓民国 Korea, Republic Of 東アジア 　 KW クウェート Kuwait 西アジア 　 KY ケイマン諸島(英領) Cayman Islands 中央アメリカ 　 KZ カザフスタン Kazakhstan 旧ソ連 　 LA ラオス Lao People's Democratic Republic 東南アジア 　 LB レバノン Lebanon 西アジア 　 LC セントルシア Saint Lucia 中央アメリカ 　 LI リヒテンシュタイン Liechtenstein 西ヨーロッパ 　 LK スリランカ Sri Lanka 南アジア 　 LR リベリア Liberia 西アフリカ 　 LS レソト Lesotho 南アフリカ 　 LT リトアニア Lithuania 旧ソ連 　 LU ルクセンブルク Luxembourg 西ヨーロッパ 　 LV ラトビア Latvia 旧ソ連 　 LY リビア Libyan Arab Jamahiriya 北アフリカ 　 MA モロッコ Morocco 北アフリカ 　 MC モナコ Monaco 西ヨーロッパ 　 MD モルドバ Moldova, Republic Of 旧ソ連 　 MG マダガスカル Madagascar 南アフリカ 　 MH マーシャル諸島(米自由連合) Marshall Islands ミクロネシア 　 MK マケドニア Macedonia, The Former Yugoslav Republic Of 東ヨーロッパ ML マリ Mali 西アフリカ 　 MM ミャンマー Myanmar 東南アジア 　 MN モンゴル Mongolia 東アジア 　 MO マカオ Macau 東アジア 　 MP 北マリアナ諸島 Northern Mariana Islands メラネシア 　 MQ マルチニーク(フランス海外県) Martinique 中央アメリカ 　 MR モーリタニア Mauritania 西アフリカ 　 MS モントセラト(英領) Montserrat 中央アメリカ 　 MT マルタ Malta 西ヨーロッパ 　 MU モーリシャス Mauritius 南アフリカ 　 MV モルディブ Maldives 南アジア 　 MW マラウイ Malawi 南アフリカ 　 MX メキシコ Mexico 北アメリカ 　 MY マレーシア Malaysia 東南アジア 　 MZ モザンビーク Mozambique 南アフリカ 　 NA ナミビア Namibia 南アフリカ 　 NC ニューカレドニア(仏領) New Caledonia メラネシア 　 NE ニジェール Niger 西アフリカ 　 NF ノーフォーク諸島(オーストラリア領) Norfolk Island メラネシア NG ナイジェリア Nigeria 西アフリカ 　 NI ニカラグア Nicaragua 中央アメリカ 　 NL オランダ Netherlands 西ヨーロッパ 　 NO ノルウェー Norway 北ヨーロッパ 　 NP ネパール Nepal 南アジア 　 NR ナウル Nauru ミクロネシア 　 NU ニウエ(ニュージーランド自治領) Niue ポリネシア 　 NZ ニュージーランド New Zealand オセアニア 　 OM オマーン Oman 西アジア 　 PA パナマ Panama 中央アメリカ 　 PE ペルー Peru 南アメリカ 　 PF フランス領ポリネシア French Polynesia ポリネシア 　 PG パプアニューギニア Papua New Guinea オセアニア 　 PH フィリピン Philippines 東南アジア 　 PK パキスタン Pakistan 南アジア 　 PL ポーランド Poland 東ヨーロッパ 　 PM サンピエール・ミクロン諸島(フランス海外領土) St. Pierre And Miquelon 北アメリカ 　 PN ピトケアン諸島(英領) Pitcairn ポリネシア 　 PR プエルトリコ Puerto Rico 中央アメリカ 　 PS パレスチナ Palestinian Territories 西アジア 　 PT ポルトガル Portugal 西ヨーロッパ 　 PW パラオ Palau 東南アジア 　 PY パラグアイ Paraguay 南アメリカ 　 QA カタール Qatar 西アジア 　 RE レユニオン島(仏領) Reunion アフリカ 　 RO ルーマニア Romania 東ヨーロッパ 　 RU ロシア連邦 Russian Federation 旧ソ連 　 RW ルワンダ Rwanda 中央アフリカ 　 SA サウジアラビア Saudi Arabia 西アジア 　 SB ソロモン諸島 Solomon Islands メラネシア 　 SC セイシェル Seychelles 東アフリカ 　 SD スーダン Sudan 東アフリカ 　 SE スウェーデン Sweden 北ヨーロッパ 　 SG シンガポール Singapore 東南アジア 　 SH セントヘレナ島(英領) St. Helena アフリカ 　 SI スロベニア Slovenia 東ヨーロッパ 　 SJ スバールバル・ヤンマイエン島(ノルウェー領) Svalbard And Jan Mayen Islands 北ヨーロッパ SK スロバキア Slovakia (Slovak Republic) 東ヨーロッパ 　 SL シエラレオネ Sierra Leone 西アフリカ 　 SM サンマリノ San Marino 西ヨーロッパ 　 SN セネガル Senegal 西アフリカ 　 SO ソマリア Somalia 東アフリカ 　 SR スリナム Suriname 南アメリカ 　 ST サントメ・プリンシペ Sao Tome And Principe 中央アフリカ 　 SV エルサルバドル El Salvador 中央アメリカ 　 SY シリア Syrian Arab Republic 西アジア 　 SZ スワジランド Swaziland 南アフリカ 　 TC タークス諸島・カイコス諸島(英領) Turks And Caicos Islands 中央アメリカ 　 TD チャド Chad 中央アフリカ 　 TF 仏南方領 French Southern Territories アフリカ 　 TG トーゴ Togo 西アフリカ 　 TH タイ Thailand 東南アジア 　 TJ タジキスタン Tajikistan 旧ソ連 　 TK トケラウ(ニュージーランド自治領) Tokelau ポリネシア 　 TM トルクメニスタン Turkmenistan 旧ソ連 　 TN チュニジア Tunisia 北アフリカ 　 TO トンガ Tonga ポリネシア 　 TP 東ティモール East Timor 東南アジア 　 TR トルコ Turkey 西アジア 　 TT トリニダード・トバゴ Trinidad And Tobago 中央アメリカ 　 TV ツバル Tuvalu ポリネシア 　 TW 台湾 Taiwan, Province Of China 東アジア 　 TZ タンザニア Tanzania, United Republic Of 東アフリカ 　 UA ウクライナ Ukraine 旧ソ連 　 UG ウガンダ Uganda 中央アフリカ 　 UK イギリス United Kingdom 西ヨーロッパ TLDのみ UM 米島嶼部(ミッドウェー、ジョンストン、ウェーク諸島) United States Minor Outlying Islands オセアニア 　 US アメリカ合衆国 United States 北アメリカ 　 UY ウルグアイ Uruguay 南アメリカ 　 UZ ウズベキスタン Uzbekistan 旧ソ連 　 VA バチカン市国 Vatican City State 西ヨーロッパ 　 VC セントビンセントおよびグレナディーン諸島 Saint Vincent And The Grenadines 中央アメリカ 　 VE ベネズエラ Venezuela 南アメリカ 　 VG 英領バージン諸島 Virgin Islands 中央アメリカ 　 VI 米領バージン諸島 Virgin Islands 中央アメリカ 　 VN ベトナム Viet Nam 東南アジア 　 VU バヌアツ Vanuatu ポリネシア 　 WF ワリスフツナ諸島(仏領) Wallis And Futuna Islands ポリネシア WS 西サモア Samoa ポリネシア 　 YE イエメン Yemen 西アジア 　 YT マヨット島(仏領) Mayotte アフリカ 　 YU ユーゴスラビア Yugoslavia 東ヨーロッパ 　 ZA 南アフリカ共和国 South Africa 南アフリカ 　 ZM ザンビア Zambia 南アフリカ 　 ZR ザイール(現在ではコンゴ民主共和国) Zaire 中央アフリカ 廃止 ZW ジンバブエ Zimbabwe 南アフリカ 　これらの基礎知識があるだけでも、相手の多くを知ることができ、私のような「人間」にでも、ＩＰから相手を特定することが可能になるわけです。 　結論しか聞かない“Ｄ”は （口癖はノブナガの「デ、アルカ」と同じ「ン。ソウカ」）、この結論を聞いて、「ネットカフェにも防犯カメラぐらいあるしな。つまり電話機を知らないやつが番号通知されてるのを知らないでかけてるのと同じパターンだな？　パソコンはぜんぶ番号通知なわけだ」、とコメントされていました。 　おっしゃる通りです。 ／井原 「それもいいですね！」 　　／なんでも手掛けたがるＨ生田さんやＭ脇さんの、選択肢を絞れない時の回答。 「だいたい分かりました。分からなくなったら会長に聞きます」 　　／本当は最初から全く分かっていない時のＵ原君やＭ嶋君の回答。
2008/02/04(月) 00:05:01|
炎上対処のための基礎知識
| トラックバック：0
| コメント：0
ＩＰアドレスとは？　と聞かれることが多いのでご説明します。ＩＰアドレスとは、インターネットやイントラネットなどのＩＰネットワークに接続されたコンピュータや通信機器1台1台に割り振られた識別番号です。インターネット上ではこの数値に重複があってはならないため、ＩＰアドレスの割り当てなどの管理は各国のＮＩＣ（ネットワークインフォメーションセンター）が行なっています。 　インターネットなどのネットワークは機器間の通信には、ＩＰ（Internet Protocol）というプロトコル（通信規約）が用いられます。ＩＰアドレスはこのＩＰで運用されるネットワークにおける個々の通信機器やコンピュータの住所のようなもので、現在広く普及している「ＩＰｖ４」（Internet Protocol version 4）では、簡単に言えばＩＰアドレスに８ビットずつ４つに区切られた32ビットの数値が使われ、「211.９.36.148」といったように、０から255までの10進数の数字を４つ並べて表現します。単なる数値の羅列であるＩＰアドレスは、そのままでは人間にとっては覚えにくいため、コンピュータやネットワークに名前(ドメイン名やホスト名)がつけられている場合が多く、「ＤＮＳ」（Domain Name System）などのシステムによってＩＰアドレスとの相互変換が行なわれているせいで、普段インターネットを利用する時にＩＰアドレスそのものを目にしたり、意識するような場面はあまり多くないのですが、これがネット上の住所なわけです。 　これが人間の静脈や瞳孔のように識別可能なオリジナル性を持っており、よほどのプロでない限りレプリカは出来ません。 　それから現在のＩＰｖ４では、32ビットの数値で識別できる上限である約42億台（2の32乗）までしか一つのネットワークに接続することができず（もちろん実際の運用ではこれよりさらに少なくなってしまいます）、インターネットで利用するＩＰアドレスが足りなくなる、と警鐘を鳴らす向きもありますが、これは実情を知らない、または把握できていない人が主張しているだけです。実際には、企業など多くの機器を利用するところでは、組織内ネットワークでは自由にいくらでも使えるプライベートアドレスを使い、インターネットとの境界にグローバルアドレスとのアドレス変換を行なう機器を設置するといった運用方法が普及していますし、次世代のＩＰｖ６では128ビットのＩＰアドレスが使われ、単純計算で２の128乗、約340澗(かん)、約3.40×1038個のＩＰアドレスが利用可能になるため、IPv6に移行すれば当分のあいだＩＰアドレスが足りなくなる心配はないのです。また、そのような心配があるなら、いつでもそれに対応したシステムや環境を構築することは容易です。そのようなことは、「コンピュータの神」 である 「Ｍetal-Ｔ-Ｈ」 や 「Ben-Ｒ」 のような 「神」 を担ぎ出さなくても、つまり私やクヌースやミトニックのようなレベルの 「人間」 にでもできます。 ／井原 「そうか。んー。ま、頼むぞ」 　　／「Ｄ」が「コンピュータの神（＝Ｍetal-Ｔ-Ｈ）」の話を理解できなかった時のコメント。 　　／こちらは真剣だが、「Ｄ」には興味がない時のコメント。
2008/02/01(金) 16:20:06|
インターネットの基礎知識
| トラックバック：0
| コメント：0