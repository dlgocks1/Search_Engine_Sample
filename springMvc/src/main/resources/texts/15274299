LINQハァハァ→関数型言語？→Haskell！という感じに辿ってHaskellを勉強中なので、カリー化について。Haskell、の前にまずはC#で考える。例えば、たまーに見かける「a => b => c => a + b + c」のようなものがパッと見意味分からない。Haskellでも型定義Int->Int->Intみたいことやるので、それと同じなわけっぽいですけれど。
ゆっくり分解すると、「=>」の左が引数、右が戻り値なのでa =>( b => c => a + b + c) つまり Func<int,???>。???の部分もカッコでくくって b =>( c => a + b + c) つまりFunc<int,Func<int,???>>。c=>a+b+cは、見たまんまなのでFunc<int,Func<int,Func<int,int>>>ということになる。
冷静に解きほぐせばそんな難しくない。というわけで準備運動が済んだので、カリー化関数を作ろう。
// カリー化する関数
static Func<T, Func<U, V>> Currying<T, U, V>(Func<T, U, V> func)
{
return t => u => func(t, u);
}
// 非カリー化する関数
static Func<T, U, V> UnCurrying<T, U, V>(Func<T, Func<U, V>> func)
{
return (t, u) => func(t)(u);
}
// 例として使うx+yを返す関数
static int Sum(int x, int y)
{
return x + y;
}
static void Main()
{
int num1 = Sum(3, 5); // 普通に、8
// Sumをカリー化する、関数はデリゲートに包む必要がある
var CurriedSum = Currying((Func<int, int, int>)Sum);
int num2 = CurriedSum(3)(5); // 当然、8
var BindedSum = CurriedSum(3); // 3を部分適用する
int num3 = BindedSum(5); // 勿論、8
var UnCurriedSum = UnCurrying(CurriedSum); // 非カリー化
int num4 = UnCurriedSum(3, 5); // 当然、Sum関数と一緒
}
多分、あってる、と思いたい。カリー化とは大雑把に言って「f(x,y) = g(x)(y)」ということのようなので、そうなるようバラしたり戻したり。そういえばで気付いたのですが、関数/ラムダ式をデリゲートに包む方法は